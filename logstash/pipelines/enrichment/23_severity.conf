# Copyright (c) 2025 Battelle Energy Alliance, LLC.  All rights reserved.

filter {

  # see malcolm_severity.yaml for mappings to severity scores

  mutate {
    id => "mutate_add_field_env_logstash_severity_scoring_enrich"
    add_field => { "[@metadata][ENV_LOGSTASH_SEVERITY_SCORING_ENRICH]" => "${LOGSTASH_SEVERITY_SCORING:false}" }
  }
  if ([@metadata][ENV_LOGSTASH_SEVERITY_SCORING_ENRICH] == "true") {

    # identify cross-segment traffic based on previously-populated tag
    if ("cross_segment" in [tags]) {
      mutate { id => "mutate_add_field_severity_item_cross_segment"
               add_field => { "[event][severity_tags]" => "Cross-segment traffic" } }
    }

    # inbound/outbound/internal/external connection based on previously-populated network.direction value
    if ([event][provider] != "zeek") or ([event][dataset] != "files") {
      # zeek's files.log is excluded here because tx_hosts and tx_hosts doesn't really indicate the direction of the connection itself
      if ([network][direction] == "internal") {
        mutate { id => "mutate_add_field_severity_item_internal"
                 add_field => { "[event][severity_tags]" => "Internal traffic" } }
      } else if ([network][direction] == "external") {
        mutate { id => "mutate_add_field_severity_item_external"
                 add_field => { "[event][severity_tags]" => "External traffic" } }
      } else if ([network][direction] == "outbound") {
        mutate { id => "mutate_add_field_severity_item_outbound"
                 add_field => { "[event][severity_tags]" => "Outbound traffic" } }
      } else if ([network][direction] == "inbound") {
        mutate { id => "mutate_add_field_severity_item_inbound"
                 add_field => { "[event][severity_tags]" => "Inbound traffic" } }
      }
    }

    # traffic to/from suspicious country codes
    if ([source][geo][country_iso_code]) or ([destination][geo][country_iso_code]) or ([dns][GEO]) {
      ruby {
        id => "ruby_add_field_severity_geo"
        init => "countriesStr = ENV['SENSITIVE_COUNTRY_CODES'] || 'AM,AZ,BY,CN,CU,DZ,GE,HK,IL,IN,IQ,IR,KG,KP,KZ,LY,MD,MO,PK,RU,SD,SS,SY,TJ,TM,TW,UA,UZ' ; @countries = countriesStr.gsub(/\s+/, '').upcase.split(',')"
        code => "
          srcGEOs = event.get('[source][geo][country_iso_code]')
          dstGEOs = event.get('[destination][geo][country_iso_code]')
          dnsGEOs = event.get('[dns][GEO]')
          allGEOs = [srcGEOs.nil? ? [] : (srcGEOs.kind_of?(Array) ? srcGEOs : [srcGEOs]),
                     dstGEOs.nil? ? [] : (dstGEOs.kind_of?(Array) ? dstGEOs : [dstGEOs]),
                     dnsGEOs.nil? ? [] : (dnsGEOs.kind_of?(Array) ? dnsGEOs : [dnsGEOs])].flatten
          if (!((allGEOs & @countries).empty?)) then
            sevtags = Array.new unless (sevtags = event.get('[event][severity_tags]'))
            sevtags = [sevtags] unless sevtags.is_a?(Array)
            sevtags.push('Sensitive country')
            event.set('[event][severity_tags]', sevtags)
          end"
      }
    }

    # tunneled/VPN traffic
    if (("ipsec" in [network][protocol]) or
        ("openvpn" in [network][protocol]) or
        ("wireguard" in [network][protocol]) or
        ("l2tp" in [network][protocol]) or
        ("sstp" in [network][protocol])) {
        mutate { id => "mutate_add_field_severity_item_vpn"
                 add_field => { "[event][severity_tags]" => "VPN traffic" } }
    }

    # these (high/medium) file types pulled from extractor_override.interesting.zeek
    # and probably ought to be modified if that file is modified
    if ([file][mime_type]) {

      # "high" severity files are executables and scripts (?)
      if (("application/PowerShell" in [file][mime_type]) or
          ("application/vnd.microsoft.portable-executable" in [file][mime_type]) or
          ("application/x-csh" in [file][mime_type]) or
          ("application/x-dosexec" in [file][mime_type]) or
          ("application/x-elf" in [file][mime_type]) or
          ("application/x-executable" in [file][mime_type]) or
          ("application/x-ms-application" in [file][mime_type]) or
          ("application/x-msdos-program" in [file][mime_type]) or
          ("application/x-pe-app-32bit-i386" in [file][mime_type]) or
          ("application/x-perl" in [file][mime_type]) or
          ("application/x-python" in [file][mime_type]) or
          ("application/x-sh" in [file][mime_type]) or
          ("text/vbscript" in [file][mime_type])) {
        mutate { id => "mutate_add_field_severity_file_type_high"
                 add_field => { "[event][severity_tags]" => "File transfer (high concern)" } }

      # "medium" severity files are everything else in the "interesting" list
      } else if (("application/binary" in [file][mime_type]) or
                 ("application/ecmascript" in [file][mime_type]) or
                 ("application/hta" in [file][mime_type]) or
                 ("application/java-archive" in [file][mime_type]) or
                 ("application/java-serialized-object" in [file][mime_type]) or
                 ("application/java-vm" in [file][mime_type]) or
                 ("application/javascript" in [file][mime_type]) or
                 ("application/ms-vsi" in [file][mime_type]) or
                 ("application/msaccess" in [file][mime_type]) or
                 ("application/msaccess.addin" in [file][mime_type]) or
                 ("application/msaccess.cab" in [file][mime_type]) or
                 ("application/msaccess.ftemplate" in [file][mime_type]) or
                 ("application/msaccess.runtime" in [file][mime_type]) or
                 ("application/msaccess.webapplication" in [file][mime_type]) or
                 ("application/msexcel" in [file][mime_type]) or
                 ("application/mspowerpoint" in [file][mime_type]) or
                 ("application/msword" in [file][mime_type]) or
                 ("application/octet-stream" in [file][mime_type]) or
                 ("application/pdf" in [file][mime_type]) or
                 ("application/rtf" in [file][mime_type]) or
                 ("application/vnd.apple.installer+xml" in [file][mime_type]) or
                 ("application/vnd.ms-cab-compressed" in [file][mime_type]) or
                 ("application/vnd.ms-excel" in [file][mime_type]) or
                 ("application/vnd.ms-excel.addin.macroEnabled.12" in [file][mime_type]) or
                 ("application/vnd.ms-excel.addin.macroenabled.12" in [file][mime_type]) or
                 ("application/vnd.ms-excel.sheet.binary.macroEnabled.12" in [file][mime_type]) or
                 ("application/vnd.ms-excel.sheet.binary.macroenabled.12" in [file][mime_type]) or
                 ("application/vnd.ms-excel.sheet.macroEnabled.12" in [file][mime_type]) or
                 ("application/vnd.ms-excel.sheet.macroenabled.12" in [file][mime_type]) or
                 ("application/vnd.ms-excel.template.macroEnabled.12" in [file][mime_type]) or
                 ("application/vnd.ms-excel.template.macroenabled.12" in [file][mime_type]) or
                 ("application/vnd.ms-office.calx" in [file][mime_type]) or
                 ("application/vnd.ms-officetheme" in [file][mime_type]) or
                 ("application/vnd.ms-powerpoint" in [file][mime_type]) or
                 ("application/vnd.ms-powerpoint.addin.macroEnabled.12" in [file][mime_type]) or
                 ("application/vnd.ms-powerpoint.addin.macroenabled.12" in [file][mime_type]) or
                 ("application/vnd.ms-powerpoint.presentation.macroEnabled.12" in [file][mime_type]) or
                 ("application/vnd.ms-powerpoint.presentation.macroenabled.12" in [file][mime_type]) or
                 ("application/vnd.ms-powerpoint.slide.macroEnabled.12" in [file][mime_type]) or
                 ("application/vnd.ms-powerpoint.slide.macroenabled.12" in [file][mime_type]) or
                 ("application/vnd.ms-powerpoint.slideshow.macroEnabled.12" in [file][mime_type]) or
                 ("application/vnd.ms-powerpoint.slideshow.macroenabled.12" in [file][mime_type]) or
                 ("application/vnd.ms-powerpoint.template.macroEnabled.12" in [file][mime_type]) or
                 ("application/vnd.ms-powerpoint.template.macroenabled.12" in [file][mime_type]) or
                 ("application/vnd.ms-word.document.macroEnabled.12" in [file][mime_type]) or
                 ("application/vnd.ms-word.document.macroenabled.12" in [file][mime_type]) or
                 ("application/vnd.ms-word.template.macroEnabled.12" in [file][mime_type]) or
                 ("application/vnd.ms-word.template.macroenabled.12" in [file][mime_type]) or
                 ("application/vnd.openofficeorg.extension" in [file][mime_type]) or
                 ("application/vnd.openxmlformats-officedocument.presentationml.presentation" in [file][mime_type]) or
                 ("application/vnd.openxmlformats-officedocument.presentationml.slide" in [file][mime_type]) or
                 ("application/vnd.openxmlformats-officedocument.presentationml.slideshow" in [file][mime_type]) or
                 ("application/vnd.openxmlformats-officedocument.presentationml.template" in [file][mime_type]) or
                 ("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" in [file][mime_type]) or
                 ("application/vnd.openxmlformats-officedocument.spreadsheetml.template" in [file][mime_type]) or
                 ("application/vnd.openxmlformats-officedocument.wordprocessingml.document" in [file][mime_type]) or
                 ("application/vnd.openxmlformats-officedocument.wordprocessingml.template" in [file][mime_type]) or
                 ("application/windows-library+xml" in [file][mime_type]) or
                 ("application/x-7z-compressed" in [file][mime_type]) or
                 ("application/x-ace-compressed" in [file][mime_type]) or
                 ("application/x-apple-diskimage" in [file][mime_type]) or
                 ("application/x-bzip" in [file][mime_type]) or
                 ("application/x-bzip2" in [file][mime_type]) or
                 ("application/x-cfs-compressed" in [file][mime_type]) or
                 ("application/x-compress" in [file][mime_type]) or
                 ("application/x-compressed" in [file][mime_type]) or
                 ("application/x-cpio" in [file][mime_type]) or
                 ("application/x-dgc-compressed" in [file][mime_type]) or
                 ("application/x-gca-compressed" in [file][mime_type]) or
                 ("application/x-gtar" in [file][mime_type]) or
                 ("application/x-gzip" in [file][mime_type]) or
                 ("application/x-install-instructions" in [file][mime_type]) or
                 ("application/x-lzh-compressed" in [file][mime_type]) or
                 ("application/x-ms-evtx" in [file][mime_type]) or
                 ("application/x-ms-installer" in [file][mime_type]) or
                 ("application/x-ms-shortcut" in [file][mime_type]) or
                 ("application/x-msdownload" in [file][mime_type]) or
                 ("application/x-rar-compressed" in [file][mime_type]) or
                 ("application/x-shockwave-flash" in [file][mime_type]) or
                 ("application/x-zip-compressed" in [file][mime_type]) or
                 ("application/zip" in [file][mime_type]) or
                 ("text/jscript" in [file][mime_type]) or
                 ("text/rtf" in [file][mime_type])) {
        mutate { id => "mutate_add_field_severity_file_type_medium"
                 add_field => { "[event][severity_tags]" => "File transfer (medium concern)" } }

      # "low" severity files are other file transfers
      } else {
        mutate { id => "mutate_add_field_severity_file_type"
                 add_field => { "[event][severity_tags]" => "File transfer" } }
      }
    }

    # if related.password exists, it's assumed to be in cleartext
    if ([related][password]) {
      mutate { id => "mutate_add_field_severity_password_exists"
               add_field => { "[event][severity_tags]" => "Cleartext password" } }
    }

    # check for high-entropy domain names for non-internal connections
    if ([event][freq_score_v1]) or ([event][freq_score_v2]) {
      ruby {
        id => "ruby_add_field_severity_domain_entropy"
        init => "@freqSeverityThreshold = ENV['FREQ_SEVERITY_THRESHOLD'] || '3.0'"
        code => "
          freqs1 = event.get('[event][freq_score_v1]')
          freqs2 = event.get('[event][freq_score_v2]')
          lowestFreqScore = [freqs1.nil? ? 100 : (freqs1.kind_of?(Array) ? freqs1.min : freqs1),
                             freqs2.nil? ? 100 : (freqs2.kind_of?(Array) ? freqs2.min : freqs2)].min
          if (lowestFreqScore < Float(@freqSeverityThreshold)) then
            sevtags = Array.new unless (sevtags = event.get('[event][severity_tags]'))
            sevtags = [sevtags] unless sevtags.is_a?(Array)
            sevtags.push('High entropy domain')
            event.set('[event][severity_tags]', sevtags)
          end"
      }
    }

    # check for large connection size
    if ([totDataBytes]) or ([network][bytes]) {
      ruby {
        id => "ruby_add_field_severity_total_bytes"
        init => "mbSeverityThreshold = ENV['TOTAL_MEGABYTES_SEVERITY_THRESHOLD'] || '1000' ; @bytesSeverityThreshold = Integer(mbSeverityThreshold) * 1000000"
        code => "
          totDataBytes = event.get('[totDataBytes]')
          totBytes = event.get('[network][bytes]')
          highBytes = [totDataBytes.nil? ? 0 : Integer(totDataBytes),
                       totBytes.nil? ? 0 : Integer(totBytes)].max
          if (@bytesSeverityThreshold > 0) and (highBytes >= @bytesSeverityThreshold) then
            sevtags = Array.new unless (sevtags = event.get('[event][severity_tags]'))
            sevtags = [sevtags] unless sevtags.is_a?(Array)
            sevtags.push('High volume connection')
            event.set('[event][severity_tags]', sevtags)
          end"
      }
    }

    # insecure/outdated protocols requires a little bit more code than logstash can do
    # so we'll do it in Ruby. at the moment these are mirroring what's in the
    # Security Overview (95479950-41f2-11ea-88fa-7151df485405) dashboard, so they
    # probably should be kept up-to-date with that.
    #
    # in addition to insecure/outdated protocols, append PROTOCOL_XXX to the
    # severity_tags list, where XXX is the uppercased value of network.protocol,
    # so that if the user wants to add PROTOCOL_SSH or whatever to their mapping
    # for a custom severity value it will just work. if it's not in their
    # mapping file, it'll return with a nil value and will be removed
    # in ruby_calculate_final_severity_score
    #
    # since we're loading the services here, we'll also take care of "services
    # running on a non-standard port" as well
    if ([event][provider] != "zeek") or (!([event][dataset] =~ /^known/)) {
      ruby {
        id => "ruby_add_field_severity_insecure_protocols"
        init => "
          require 'yaml'; $servicePortMap = YAML.safe_load(File.read('/etc/service_ports.yaml'))
        "
        code => "
          if (service = event.get('[network][protocol]')) then
            foundInsec = 0
            foundOddPort = 0
            service = [service] unless service.is_a?(Array)
            version = event.get('[network][protocol_version]')
            version = [version] unless version.nil? or version.is_a?(Array)
            if ($servicePortMap.length > 0) and
               (dstPort = event.get('[destination][port]')) then
              service.each do |srv|
                if (!$servicePortMap[srv].nil?) and
                   ($servicePortMap[srv].kind_of?(Array)) and
                   ($servicePortMap[srv].length > 0) and
                   (!$servicePortMap[srv].include?(dstPort)) then
                  foundOddPort += 1
                  break
                end
              end
            end
            service.each do |srv|
              if foundInsec > 0 then
                break
              end
              if ['ftp', 'tftp', 'telnet', 'rlogin', 'rsh'].include?(srv) then
                foundInsec += 1
              elsif !version.nil? then
                version.each do |ver|
                  if foundInsec > 0 then
                    break
                  end
                  if (srv.eql?('ssh') and (ver.to_f < 2.0)) or
                     (srv.eql?('smb') and (ver.to_f < 2.0)) or
                     (srv.eql?('ntp') and (ver.to_f < 4.0)) or
                     (srv.eql?('rfb') and (ver.to_f < 3.8)) or
                     (srv.eql?('rdp') and (ver.to_f < 6.0)) or
                     (srv.eql?('snmp') and (ver.to_f < 3.0)) or
                     (srv.eql?('ldap') and (ver.to_f < 3.0)) or
                     (srv.eql?('tls') and (!(ver.match(/TLS.*v?1\.?[23]/)))) then
                    foundInsec += 1
                  end
                end
              end
            end
            sevtags = Array.new unless (sevtags = event.get('[event][severity_tags]'))
            sevtags = [sevtags] unless sevtags.is_a?(Array)
            if foundInsec > 0 then
              sevtags.push('Insecure or outdated protocol')
            end
            if foundOddPort > 0 then
              sevtags.push('Service on non-standard port')
            end
            sevtags.push(*service.map{|x| 'PROTOCOL_' + x.upcase})
            event.set('[event][severity_tags]', sevtags)
          end"
      }
    }

    ruby {
      id => "ruby_calculate_final_severity_score"
      # pre-load severity score mapping in init outside of processing pipeline
      init => "
        require 'yaml'; $severityMap = YAML.safe_load(File.read('/etc/malcolm_severity.yaml'))
      "
      # to calculate severity:
      # - look up list of severity_tags against severity score mapping (generate hash), ignoring <= 0 or missing (nil) values
      # - set summed severity scores in event.severity/risk_score/risk_score_norm
      # - set pruned severity_tags back to event.severity_tags
      code => "
        sevtags = event.get('[event][severity_tags]')
        sevnum = 0
        presetSevnumNorm = event.get('[event][severity]').to_i
        sevtags = [sevtags] unless sevtags.nil? or sevtags.is_a?(Array)
        if !sevtags.nil? and (sevtags.length > 0) and ($severityMap.length > 0) then
          sevhash = Hash[sevtags.select{|key| ($severityMap[key].nil? ? 0 : $severityMap[key]) > 0}.map{|key| [key, $severityMap[key]]}]
          sevnum = sevhash.values.sum
        end
        if (sevnum > 0) or (presetSevnumNorm > 0) then
          sevnumNorm = [[sevnum, presetSevnumNorm].max, 100].min
          event.set('[event][risk_score]', Float(sevnum + presetSevnumNorm))
          event.set('[event][risk_score_norm]', Float(sevnumNorm))
          event.set('[event][severity]', sevnumNorm)
          event.set('[event][severity_tags]', sevhash.keys) if sevhash.length > 0
        else
          event.remove('[event][severity_tags]')
        end"
    }

    # TODO: ECS has some severity scoring stuff in https://www.elastic.co/guide/en/ecs/current/ecs-vulnerability.html, which we could look at using,
    # but I'm not sure it's always applicable since not everything here is a "vulnerability"

  } # LOGSTASH_SEVERITY_SCORING env check

} # filter
