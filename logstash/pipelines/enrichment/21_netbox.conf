filter {


  ################################################################################################
  # Do enrichment based on NetBox lookups:
  # - source.ip -> source.device and source.segment
  # - destination.ip -> destination.device and destination.segment
  # - source.mac -> source.device
  # - destination.mac -> destination.device
  # Which log types get enriched is based on the LOGSTASH_NETBOX_ENRICHMENT_DATASETS env. variable
  # Other environment variables' names are passed in via ..._env parameters to netbox_enrich.rb

  ruby {
    id => "ruby_determine_netbox_suitability"
    init => "logtypesStr = ENV['LOGSTASH_NETBOX_ENRICHMENT_DATASETS'] || 'suricata.alert,zeek.conn,zeek.dhcp,zeek.dns,zeek.known_hosts,zeek.known_routers,zeek.known_services,zeek.ntlm,zeek.notice,zeek.signatures,zeek.software,zeek.weird' ; logtypesArr = logtypesStr.gsub(/\s+/, '').split(','); @logtypes = logtypesArr.group_by { |logtype| logtype.split('.').first }.transform_values { |values| values.map { |v| v.split('.')[1] } }"
    code => "
      provider = event.get('[event][provider]').to_s
      dataset = event.get('[event][dataset]').to_s
      if (@logtypes.is_a?(Hash) &&
          !@logtypes.empty? &&
          (@logtypes.has_key?('all') ||
           (!provider.empty? && !dataset.empty? && @logtypes.has_key?(provider) && @logtypes[provider].is_a?(Array) && @logtypes[provider].include?(dataset))))
      then
        event.set('[@metadata][do_netbox_enrichment]', true)
      end
    "
  }

  if ([@metadata][do_netbox_enrichment]) {

    # ################################################################################################
    # before we do the actual enrichments, we've got a few log types we can use to map IP addresses
    # to hostnames in autopopulation

    # for these ones while we'll create the device entry with an IP address
    #   and hostname, additional details (such as the manufacturer based
    #   on MAC address) will need to be updated later (also note the blank
    #   "target" which means this record will be used to populate the netbox
    #   database, but nothing will actually be stored in a field of the
    #   record itself as a result of this filter)

    if ([dns][question][name]) and ([dns][resolved_ip]) {
      ruby {
        id => "ruby_netbox_enrich_dns_ip_to_host"
        path => "/usr/share/logstash/malcolm-ruby/netbox_enrich.rb"
        script_params => {
          "lookup_type" => "ip_device"
          "source" => "[dns][resolved_ip]"
          "source_hostname" => "[dns][question][name]"
          "add_tag" => "netbox"
          "enabled_env" => "NETBOX_ENRICHMENT"
          "verbose_env" => "NETBOX_ENRICHMENT_VERBOSE"
          "debug_env" => "NETBOX_ENRICHMENT_DEBUG"
          "debug_timings_env" => "NETBOX_ENRICHMENT_DEBUG_TIMINGS"
          "lookup_site_id" => "[@metadata][nbsiteid]"
          "lookup_site_env" => "NETBOX_DEFAULT_SITE"
          "netbox_token_env" => "NETBOX_TOKEN;SUPERUSER_API_TOKEN"
          "netbox_url_env" => "NETBOX_URL"
          "cache_size_env" => "NETBOX_CACHE_SIZE"
          "cache_ttl_env" => "NETBOX_CACHE_TTL"
          "autopopulate_env" => "NETBOX_AUTO_POPULATE"
          "autopopulate_subnets_env" => "NETBOX_AUTO_POPULATE_SUBNETS"
          "default_manuf_env" => "NETBOX_DEFAULT_MANUFACTURER"
          "default_dtype_env" => "NETBOX_DEFAULT_DEVICE_TYPE"
          "default_role_env" => "NETBOX_DEFAULT_ROLE"
        }
      }
    }

    if ([zeek][ntlm]) {

      if ([zeek][ntlm][host]) and ([source][ip]) {
        ruby {
          id => "ruby_netbox_enrich_ntlm_host_to_ip"
          path => "/usr/share/logstash/malcolm-ruby/netbox_enrich.rb"
          script_params => {
            "lookup_type" => "ip_device"
            "source" => "[source][ip]"
            "source_hostname" => "[zeek][ntlm][host]"
            "add_tag" => "netbox"
            "enabled_env" => "NETBOX_ENRICHMENT"
            "verbose_env" => "NETBOX_ENRICHMENT_VERBOSE"
            "debug_env" => "NETBOX_ENRICHMENT_DEBUG"
            "debug_timings_env" => "NETBOX_ENRICHMENT_DEBUG_TIMINGS"
            "lookup_site_id" => "[@metadata][nbsiteid]"
            "lookup_site_env" => "NETBOX_DEFAULT_SITE"
            "netbox_token_env" => "NETBOX_TOKEN;SUPERUSER_API_TOKEN"
            "netbox_url_env" => "NETBOX_URL"
            "cache_size_env" => "NETBOX_CACHE_SIZE"
            "cache_ttl_env" => "NETBOX_CACHE_TTL"
            "autopopulate_env" => "NETBOX_AUTO_POPULATE"
            "autopopulate_subnets_env" => "NETBOX_AUTO_POPULATE_SUBNETS"
            "default_manuf_env" => "NETBOX_DEFAULT_MANUFACTURER"
            "default_dtype_env" => "NETBOX_DEFAULT_DEVICE_TYPE"
            "default_role_env" => "NETBOX_DEFAULT_ROLE"
          }
        }
      } # ([zeek][ntlm][host]) and ([source][ip])

      if ([destination][ip]) {
        if ([zeek][ntlm][server_nb_computer]) {
          ruby {
            id => "ruby_netbox_enrich_ntlm_server_nb_computer_to_ip"
            path => "/usr/share/logstash/malcolm-ruby/netbox_enrich.rb"
            script_params => {
              "lookup_type" => "ip_device"
              "source" => "[destination][ip]"
              "source_hostname" => "[zeek][ntlm][server_nb_computer]"
              "add_tag" => "netbox"
              "enabled_env" => "NETBOX_ENRICHMENT"
              "verbose_env" => "NETBOX_ENRICHMENT_VERBOSE"
              "debug_env" => "NETBOX_ENRICHMENT_DEBUG"
              "debug_timings_env" => "NETBOX_ENRICHMENT_DEBUG_TIMINGS"
              "lookup_site_id" => "[@metadata][nbsiteid]"
              "lookup_site_env" => "NETBOX_DEFAULT_SITE"
              "netbox_token_env" => "NETBOX_TOKEN;SUPERUSER_API_TOKEN"
              "netbox_url_env" => "NETBOX_URL"
              "cache_size_env" => "NETBOX_CACHE_SIZE"
              "cache_ttl_env" => "NETBOX_CACHE_TTL"
              "autopopulate_env" => "NETBOX_AUTO_POPULATE"
              "autopopulate_subnets_env" => "NETBOX_AUTO_POPULATE_SUBNETS"
              "default_manuf_env" => "NETBOX_DEFAULT_MANUFACTURER"
              "default_dtype_env" => "NETBOX_DEFAULT_DEVICE_TYPE"
              "default_role_env" => "NETBOX_DEFAULT_ROLE"
            }
          }
        } else if ([zeek][ntlm][server_dns_computer]) {
          ruby {
            id => "ruby_netbox_enrich_ntlm_server_dns_computer_to_ip"
            path => "/usr/share/logstash/malcolm-ruby/netbox_enrich.rb"
            script_params => {
              "lookup_type" => "ip_device"
              "source" => "[destination][ip]"
              "source_hostname" => "[zeek][ntlm][server_dns_computer]"
              "add_tag" => "netbox"
              "enabled_env" => "NETBOX_ENRICHMENT"
              "verbose_env" => "NETBOX_ENRICHMENT_VERBOSE"
              "debug_env" => "NETBOX_ENRICHMENT_DEBUG"
              "debug_timings_env" => "NETBOX_ENRICHMENT_DEBUG_TIMINGS"
              "lookup_site_id" => "[@metadata][nbsiteid]"
              "lookup_site_env" => "NETBOX_DEFAULT_SITE"
              "netbox_token_env" => "NETBOX_TOKEN;SUPERUSER_API_TOKEN"
              "netbox_url_env" => "NETBOX_URL"
              "cache_size_env" => "NETBOX_CACHE_SIZE"
              "cache_ttl_env" => "NETBOX_CACHE_TTL"
              "autopopulate_env" => "NETBOX_AUTO_POPULATE"
              "autopopulate_subnets_env" => "NETBOX_AUTO_POPULATE_SUBNETS"
              "default_manuf_env" => "NETBOX_DEFAULT_MANUFACTURER"
              "default_dtype_env" => "NETBOX_DEFAULT_DEVICE_TYPE"
              "default_role_env" => "NETBOX_DEFAULT_ROLE"
            }
          }
        }
      } # [destination][ip]
    } # ntlm


    if ([zeek][dhcp][assigned_ip]) {
      if ([zeek][dhcp][client_fqdn]) {
        ruby {
          id => "ruby_netbox_enrich_dhcp_client_fqdn_to_ip"
          path => "/usr/share/logstash/malcolm-ruby/netbox_enrich.rb"
          script_params => {
            "lookup_type" => "ip_device"
            "source" => "[zeek][dhcp][assigned_addr]"
            "source_hostname" => "[zeek][dhcp][client_fqdn]"
            "add_tag" => "netbox"
            "enabled_env" => "NETBOX_ENRICHMENT"
            "verbose_env" => "NETBOX_ENRICHMENT_VERBOSE"
            "debug_env" => "NETBOX_ENRICHMENT_DEBUG"
            "debug_timings_env" => "NETBOX_ENRICHMENT_DEBUG_TIMINGS"
            "lookup_site_id" => "[@metadata][nbsiteid]"
            "lookup_site_env" => "NETBOX_DEFAULT_SITE"
            "netbox_token_env" => "NETBOX_TOKEN;SUPERUSER_API_TOKEN"
            "netbox_url_env" => "NETBOX_URL"
            "cache_size_env" => "NETBOX_CACHE_SIZE"
            "cache_ttl_env" => "NETBOX_CACHE_TTL"
            "autopopulate_env" => "NETBOX_AUTO_POPULATE"
            "autopopulate_subnets_env" => "NETBOX_AUTO_POPULATE_SUBNETS"
            "default_manuf_env" => "NETBOX_DEFAULT_MANUFACTURER"
            "default_dtype_env" => "NETBOX_DEFAULT_DEVICE_TYPE"
            "default_role_env" => "NETBOX_DEFAULT_ROLE"
          }
        }
      } else if ([zeek][dhcp][host_name]) {
        ruby {
          id => "ruby_netbox_enrich_dhcp_host_name_to_ip"
          path => "/usr/share/logstash/malcolm-ruby/netbox_enrich.rb"
          script_params => {
            "lookup_type" => "ip_device"
            "source" => "[zeek][dhcp][assigned_addr]"
            "source_hostname" => "[zeek][dhcp][host_name]"
            "add_tag" => "netbox"
            "enabled_env" => "NETBOX_ENRICHMENT"
            "verbose_env" => "NETBOX_ENRICHMENT_VERBOSE"
            "debug_env" => "NETBOX_ENRICHMENT_DEBUG"
            "debug_timings_env" => "NETBOX_ENRICHMENT_DEBUG_TIMINGS"
            "lookup_site_id" => "[@metadata][nbsiteid]"
            "lookup_site_env" => "NETBOX_DEFAULT_SITE"
            "netbox_token_env" => "NETBOX_TOKEN;SUPERUSER_API_TOKEN"
            "netbox_url_env" => "NETBOX_URL"
            "cache_size_env" => "NETBOX_CACHE_SIZE"
            "cache_ttl_env" => "NETBOX_CACHE_TTL"
            "autopopulate_env" => "NETBOX_AUTO_POPULATE"
            "autopopulate_subnets_env" => "NETBOX_AUTO_POPULATE_SUBNETS"
            "default_manuf_env" => "NETBOX_DEFAULT_MANUFACTURER"
            "default_dtype_env" => "NETBOX_DEFAULT_DEVICE_TYPE"
            "default_role_env" => "NETBOX_DEFAULT_ROLE"
          }
        }
      }
    }

    # ################################################################################################
    # now we're doing the actual enrichment lookups (i.e., we have a target)

    if ([source][ip]) and
       (([network][direction] == "internal") or ([network][direction] == "outbound")) {
      ruby {
        id => "ruby_netbox_enrich_source_ip_segment"
        path => "/usr/share/logstash/malcolm-ruby/netbox_enrich.rb"
        script_params => {
          "source" => "[source][ip]"
          "target" => "[source][segment]"
          "lookup_type" => "ip_prefix"
          "add_tag" => "netbox"
          "enabled_env" => "NETBOX_ENRICHMENT"
          "verbose_env" => "NETBOX_ENRICHMENT_VERBOSE"
          "debug_env" => "NETBOX_ENRICHMENT_DEBUG"
          "debug_timings_env" => "NETBOX_ENRICHMENT_DEBUG_TIMINGS"
          "auto_prefix_env" => "NETBOX_AUTO_CREATE_PREFIX"
          "lookup_site_id" => "[@metadata][nbsiteid]"
          "lookup_site_env" => "NETBOX_DEFAULT_SITE"
          "netbox_token_env" => "NETBOX_TOKEN;SUPERUSER_API_TOKEN"
          "netbox_url_env" => "NETBOX_URL"
          "cache_size_env" => "NETBOX_CACHE_SIZE"
          "cache_ttl_env" => "NETBOX_CACHE_TTL"
        }
      }
      ruby {
        id => "ruby_netbox_enrich_source_ip_device"
        path => "/usr/share/logstash/malcolm-ruby/netbox_enrich.rb"
        script_params => {
          "lookup_type" => "ip_device"
          "source" => "[source][ip]"
          "target" => "[source][device]"
          "source_oui" => "[source][oui]"
          "source_mac" => "[source][mac]"
          "source_hostname" => "[source][ip_reverse_dns]"
          "add_tag" => "netbox"
          "enabled_env" => "NETBOX_ENRICHMENT"
          "verbose_env" => "NETBOX_ENRICHMENT_VERBOSE"
          "debug_env" => "NETBOX_ENRICHMENT_DEBUG"
          "debug_timings_env" => "NETBOX_ENRICHMENT_DEBUG_TIMINGS"
          "lookup_site_id" => "[@metadata][nbsiteid]"
          "lookup_site_env" => "NETBOX_DEFAULT_SITE"
          "netbox_token_env" => "NETBOX_TOKEN;SUPERUSER_API_TOKEN"
          "netbox_url_env" => "NETBOX_URL"
          "cache_size_env" => "NETBOX_CACHE_SIZE"
          "cache_ttl_env" => "NETBOX_CACHE_TTL"
          "autopopulate_env" => "NETBOX_AUTO_POPULATE"
          "autopopulate_subnets_env" => "NETBOX_AUTO_POPULATE_SUBNETS"
          "default_manuf_env" => "NETBOX_DEFAULT_MANUFACTURER"
          "default_dtype_env" => "NETBOX_DEFAULT_DEVICE_TYPE"
          "default_role_env" => "NETBOX_DEFAULT_ROLE"
          "autopopulate_fuzzy_threshold_env" => "NETBOX_DEFAULT_FUZZY_THRESHOLD"
          "autopopulate_create_manuf_env" => "NETBOX_DEFAULT_AUTOCREATE_MANUFACTURER"
        }
      }
    }
    if ([destination][ip]) and
       (([network][direction] == "internal") or ([network][direction] == "inbound")) {
      ruby {
        id => "ruby_netbox_enrich_destination_ip_segment"
        path => "/usr/share/logstash/malcolm-ruby/netbox_enrich.rb"
        script_params => {
          "lookup_type" => "ip_prefix"
          "source" => "[destination][ip]"
          "target" => "[destination][segment]"
          "add_tag" => "netbox"
          "enabled_env" => "NETBOX_ENRICHMENT"
          "verbose_env" => "NETBOX_ENRICHMENT_VERBOSE"
          "debug_env" => "NETBOX_ENRICHMENT_DEBUG"
          "debug_timings_env" => "NETBOX_ENRICHMENT_DEBUG_TIMINGS"
          "auto_prefix_env" => "NETBOX_AUTO_CREATE_PREFIX"
          "lookup_site_id" => "[@metadata][nbsiteid]"
          "lookup_site_env" => "NETBOX_DEFAULT_SITE"
          "netbox_token_env" => "NETBOX_TOKEN;SUPERUSER_API_TOKEN"
          "netbox_url_env" => "NETBOX_URL"
          "cache_size_env" => "NETBOX_CACHE_SIZE"
          "cache_ttl_env" => "NETBOX_CACHE_TTL"
        }
      }
      ruby {
        id => "ruby_netbox_enrich_destination_ip_device"
        path => "/usr/share/logstash/malcolm-ruby/netbox_enrich.rb"
        script_params => {
          "lookup_type" => "ip_device"
          "source" => "[destination][ip]"
          "target" => "[destination][device]"
          "source_oui" => "[destination][oui]"
          "source_mac" => "[destination][mac]"
          "source_hostname" => "[destination][ip_reverse_dns]"
          "add_tag" => "netbox"
          "enabled_env" => "NETBOX_ENRICHMENT"
          "verbose_env" => "NETBOX_ENRICHMENT_VERBOSE"
          "debug_env" => "NETBOX_ENRICHMENT_DEBUG"
          "debug_timings_env" => "NETBOX_ENRICHMENT_DEBUG_TIMINGS"
          "lookup_site_id" => "[@metadata][nbsiteid]"
          "lookup_site_env" => "NETBOX_DEFAULT_SITE"
          "lookup_service_env" => "NETBOX_ENRICHMENT_LOOKUP_SERVICE"
          "lookup_service_port_source" => "[destination][port]"
          "netbox_token_env" => "NETBOX_TOKEN;SUPERUSER_API_TOKEN"
          "netbox_url_env" => "NETBOX_URL"
          "cache_size_env" => "NETBOX_CACHE_SIZE"
          "cache_ttl_env" => "NETBOX_CACHE_TTL"
          "autopopulate_env" => "NETBOX_AUTO_POPULATE"
          "autopopulate_subnets_env" => "NETBOX_AUTO_POPULATE_SUBNETS"
          "default_manuf_env" => "NETBOX_DEFAULT_MANUFACTURER"
          "default_dtype_env" => "NETBOX_DEFAULT_DEVICE_TYPE"
          "default_role_env" => "NETBOX_DEFAULT_ROLE"
          "autopopulate_fuzzy_threshold_env" => "NETBOX_DEFAULT_FUZZY_THRESHOLD"
          "autopopulate_create_manuf_env" => "NETBOX_DEFAULT_AUTOCREATE_MANUFACTURER"
        }
      }
    }
  } # do_netbox_enrichment

  # if netbox short-circuited because nbsiteid==0, un-tag it
  if ([@metadata][nbsiteid] == "0") { mutate { id => "mutate_remove_tag_netbox_zero_site_id"
                                               remove_tag => [ "netbox" ] } }

  if ("netbox" in [tags]) {
    # collect site, role, manufacturer and device_type in "related." segment is merged as network.name in 20_enriched_to_ecs.conf
    if ([source][device][site])              { mutate { id => "mutate_merge_source_device_site_related"
                                                         merge => { "[related][site]" => "[source][device][site]" } } }
    if ([destination][device][site])         { mutate { id => "mutate_merge_destination_device_site_related"
                                                        merge => { "[related][site]" => "[destination][device][site]" } } }
    if ([source][segment][site])             { mutate { id => "mutate_merge_source_segment_site_related"
                                                        merge => { "[related][site]" => "[source][segment][site]" } } }
    if ([destination][segment][site])        { mutate { id => "mutate_merge_destination_segment_site_related"
                                                        merge => { "[related][site]" => "[destination][segment][site]" } } }
    if ([source][device][role])              { mutate { id => "mutate_merge_source_device_role_related"
                                                        merge => { "[related][role]" => "[source][device][role]" } } }
    if ([destination][device][role])         { mutate { id => "mutate_merge_destination_device_role_related"
                                                        merge => { "[related][role]" => "[destination][device][role]" } } }
    if ([source][device][manufacturer])      { mutate { id => "mutate_merge_source_device_manufacturer_related"
                                                       merge => { "[related][manufacturer]" => "[source][device][manufacturer]" } } }
    if ([destination][device][manufacturer]) { mutate { id => "mutate_merge_destination_device_manufacturer_related"
                                                        merge => { "[related][manufacturer]" => "[destination][device][manufacturer]" } } }
    if ([source][device][device_type])       { mutate { id => "mutate_merge_source_device_type_related"
                                                        merge => { "[related][device_type]" => "[source][device][device_type]" } } }
    if ([destination][device][device_type])  { mutate { id => "mutate_merge_destination_device_type_related"
                                                        merge => { "[related][device_type]" => "[destination][device][device_type]" } } }
    if ([source][device][service])           { mutate { id => "mutate_merge_source_service_related"
                                                        merge => { "[related][service]" => "[source][device][service]" } } }
    if ([destination][device][service])      { mutate { id => "mutate_merge_destination_service_related"
                                                        merge => { "[related][service]" => "[destination][device][service]" } } }
    if ([source][device][name])              { mutate { id => "mutate_merge_source_device_name_related"
                                                        merge => { "[related][device_name]" => "[source][device][name]" } } }
    if ([destination][device][name])         { mutate { id => "mutate_merge_destination_device_name_related"
                                                        merge => { "[related][device_name]" => "[destination][device][name]" } } }
    if ([source][device][id])                { mutate { id => "mutate_merge_source_device_id_related"
                                                        merge => { "[related][device_id]" => "[source][device][id]" } } }
    if ([destination][device][id])           { mutate { id => "mutate_merge_destination_device_id_related"
                                                        merge => { "[related][device_id]" => "[destination][device][id]" } } }

    if [source][device][discovered] or [destination][device][discovered] { mutate { id => "mutate_add_field_related_discovered"
                                                                                    add_field => { "[related][discovered]" => "true" } } }
    if [source][device][uninventoried] or [destination][device][uninventoried] { mutate { id => "mutate_add_field_related_uninventoried"
                                                                                          add_field => { "[related][uninventoried]" => "true" } } }

    # uninventoried:
    # event.dataset:known_hosts AND network.direction:(internal OR outbound) AND (NOT source.device.id:*) AND (NOT (network.type:ipv4 AND source.ip:("100.64.0.0/10","127.0.0.0/8","192.0.0.0/24","192.0.2.0/24","192.88.99.0/24","198.18.0.0/15","198.51.100.0/24","203.0.113.0/24","224.0.0.0/4","240.0.0.0/4"))) AND (NOT (network.type:ipv6 AND source.ip:("::1/128","fe80::/10","ff00::/8")))
    # (source.device.discovered:true) OR (network.direction:(internal OR outbound) AND (NOT source.device.id:*) AND (NOT (network.type:ipv4 AND source.ip:("100.64.0.0/10","127.0.0.0/8","192.0.0.0/24","192.0.2.0/24","192.88.99.0/24","198.18.0.0/15","198.51.100.0/24","203.0.113.0/24","224.0.0.0/4","240.0.0.0/4"))) AND (NOT (network.type:ipv6 AND source.ip:("::1/128","fe80::/10","ff00::/8"))))
    # (destination.device.discovered:true) OR (network.direction:(internal OR inbound) AND (NOT destination.device.id:*) AND (NOT (network.type:ipv4 AND destination.ip:("100.64.0.0/10","127.0.0.0/8","192.0.0.0/24","192.0.2.0/24","192.88.99.0/24","198.18.0.0/15","198.51.100.0/24","203.0.113.0/24","224.0.0.0/4","240.0.0.0/4"))) AND (NOT (network.type:ipv6 AND destination.ip:("::1/128","fe80::/10","ff00::/8"))))
    # (NOT event.provider:arkime) AND ((NOT event.provider:zeek) OR event.dataset:(conn OR notice OR weird OR signatures OR software OR known*)) AND ((related.discovered:true) OR (network.direction:(internal OR inbound) AND (destination.ip:*) AND (NOT destination.device.id:*)) OR (network.direction:(internal OR outbound) AND (source.ip:*) AND (NOT source.device.id:*)))

    # network.name (based on info from [destination][segment][name] and [source][segment][name])
    if ([destination][segment][name]) { mutate { id => "mutate_add_field_ecs_network_name_resp"
                                                 merge => { "[network][name]" => "[destination][segment][name]" } } }
    if ([source][segment][name]) { mutate { id => "mutate_add_field_ecs_network_name_orig"
                                            merge => { "[network][name]" => "[source][segment][name]" } } }
  } # netbox in tags

} # filter

