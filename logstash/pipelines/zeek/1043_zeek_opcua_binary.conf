########################
# Copyright (c) 2025 Battelle Energy Alliance, LLC.  All rights reserved.
#######################

filter {

  if ([log_source] =~ /^opcua_binary/) {
    if ([log_source] == "opcua_binary") {
      #############################################################################################################################
      # opcua_binary.log
      # variant-types.zeek (https://github.com/cisagov/icsnpp-opcua-binary)

      if ("_jsonparsesuccess" not in [tags]) {
        dissect {
          id => "dissect_zeek_opcua_binary"
          mapping => {
            "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][drop_orig_h]} %{[zeek_cols][drop_orig_p]} %{[zeek_cols][drop_resp_h]} %{[zeek_cols][drop_resp_p]} %{[zeek_cols][is_orig]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][opcua_link_id]} %{[zeek_cols][msg_type]} %{[zeek_cols][is_final]} %{[zeek_cols][msg_size]} %{[zeek_cols][error]} %{[zeek_cols][reason]} %{[zeek_cols][version]} %{[zeek_cols][rcv_buf_size]} %{[zeek_cols][snd_buf_size]} %{[zeek_cols][max_msg_size]} %{[zeek_cols][max_chunk_cnt]} %{[zeek_cols][endpoint_url]} %{[zeek_cols][sec_channel_id]} %{[zeek_cols][sec_token_id]} %{[zeek_cols][sec_policy_uri_len]} %{[zeek_cols][sec_policy_uri]} %{[zeek_cols][snd_cert_len]} %{[zeek_cols][snd_cert]} %{[zeek_cols][rcv_cert_len]} %{[zeek_cols][rcv_cert]} %{[zeek_cols][seq_number]} %{[zeek_cols][request_id]} %{[zeek_cols][encoding_mask]} %{[zeek_cols][namespace_idx]} %{[zeek_cols][identifier]} %{[zeek_cols][identifier_str]} %{[zeek_cols][req_hdr_node_id_type]} %{[zeek_cols][req_hdr_node_id_namespace_idx]} %{[zeek_cols][req_hdr_node_id_numeric]} %{[zeek_cols][req_hdr_node_id_string]} %{[zeek_cols][req_hdr_node_id_guid]} %{[zeek_cols][req_hdr_node_id_opaque]} %{[zeek_cols][req_hdr_timestamp]} %{[zeek_cols][req_hdr_request_handle]} %{[zeek_cols][req_hdr_return_diag]} %{[zeek_cols][req_hdr_audit_entry_id]} %{[zeek_cols][req_hdr_timeout_hint]} %{[zeek_cols][req_hdr_add_hdr_type_id]} %{[zeek_cols][req_hdr_add_hdr_enc_mask]} %{[zeek_cols][res_hdr_timestamp]} %{[zeek_cols][res_hdr_request_handle]} %{[zeek_cols][status_code_link_id]} %{[zeek_cols][res_hdr_service_diag_encoding]} %{[zeek_cols][res_hdr_add_hdr_type_id]} %{[zeek_cols][res_hdr_add_hdr_enc_mask]}"
          }
        }
        if ("_dissectfailure" in [tags]) {
          mutate {
            id => "mutate_split_zeek_opcua_binary"
            split => { "[message]" => " " }
          }
          ruby {
            id => "ruby_zip_zeek_opcua_binary"
            init => "@zeek_opcua_binary_field_names = [ 'ts', 'uid', 'drop_orig_h', 'drop_orig_p', 'drop_resp_h', 'drop_resp_p', 'is_orig', 'orig_h', 'orig_p', 'resp_p', 'opcua_link_id', 'msg_type', 'is_final', 'msg_size', 'error', 'reason', 'version', 'rcv_buf_size', 'snd_buf_size', 'max_msg_size', 'max_chunk_cnt', 'endpoint_url', 'sec_channel_id', 'sec_token_id', 'sec_policy_uri_len', 'sec_policy_uri', 'snd_cert_len', 'snd_cert', 'rcv_cert_len', 'rcv_cert', 'seq_number', 'request_id', 'encoding_mask', 'namespace_idx', 'identifier', 'identifier_str', 'req_hdr_node_id_type', 'req_hdr_node_id_namespace_idx', 'req_hdr_node_id_numeric', 'req_hdr_node_id_string', 'req_hdr_node_id_guid', 'req_hdr_node_id_opaque', 'req_hdr_timestamp', 'req_hdr_request_handle', 'req_hdr_return_diag', 'req_hdr_audit_entry_id', 'req_hdr_timeout_hint', 'req_hdr_add_hdr_type_id', 'req_hdr_add_hdr_enc_mask', 'res_hdr_timestamp', 'res_hdr_request_handle', 'status_code_link_id', 'res_hdr_service_diag_encoding', 'res_hdr_add_hdr_type_id', 'res_hdr_add_hdr_enc_mask' ]"
            code => "event.set('[zeek_cols]', @zeek_opcua_binary_field_names.zip(event.get('[message]')).to_h)"
          }
        }
      }

      mutate {
        id => "mutate_add_fields_zeek_opcua_binary"
        add_field => {
          "[zeek_cols][proto]" => "tcp"
          "[zeek_cols][service]" => "opcua-binary"
        }
        add_tag => [ "ics" ]
      }

    } else if ([log_source] == "opcua_binary_activate_session") {
      #############################################################################################################################
      # opcua_binary_activate_session.log
      # variant-types.zeek (https://github.com/cisagov/icsnpp-opcua-binary)

      if ("_jsonparsesuccess" not in [tags]) {
        dissect {
          id => "dissect_zeek_opcua_binary_activate_session"
          mapping => {
            "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][drop_orig_h]} %{[zeek_cols][drop_orig_p]} %{[zeek_cols][drop_resp_h]} %{[zeek_cols][drop_resp_p]} %{[zeek_cols][is_orig]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][opcua_link_id]} %{[zeek_cols][client_algorithm]} %{[zeek_cols][client_signature]} %{[zeek_cols][client_software_cert_link_id]} %{[zeek_cols][opcua_locale_link_id]} %{[zeek_cols][ext_obj_type_id_encoding_mask]} %{[zeek_cols][ext_obj_type_id_namespace_idx]} %{[zeek_cols][ext_obj_type_id_numeric]} %{[zeek_cols][ext_obj_type_id_string]} %{[zeek_cols][ext_obj_type_id_guid]} %{[zeek_cols][ext_obj_type_id_opaque]} %{[zeek_cols][ext_obj_type_id_str]} %{[zeek_cols][ext_obj_encoding]} %{[zeek_cols][ext_obj_policy_id]} %{[zeek_cols][ext_obj_user_name]} %{[zeek_cols][ext_obj_password]} %{[zeek_cols][ext_obj_encryption_algorithom]} %{[zeek_cols][ext_obj_certificate_data]} %{[zeek_cols][ext_obj_token_data]} %{[zeek_cols][user_token_algorithm]} %{[zeek_cols][user_token_signature]} %{[zeek_cols][server_nonce]} %{[zeek_cols][status_code_link_id]} %{[zeek_cols][activate_session_diag_info_link_id]}"
          }
        }
        if ("_dissectfailure" in [tags]) {
          mutate {
            id => "mutate_split_zeek_opcua_binary_activate_session"
            split => { "[message]" => " " }
          }
          ruby {
            id => "ruby_zip_zeek_opcua_binary_activate_session"
            init => "@zeek_opcua_binary_activate_session_field_names = [ 'ts', 'uid', 'drop_orig_h', 'drop_orig_p', 'drop_resp_h', 'drop_resp_p', 'is_orig', 'orig_h', 'orig_p', 'resp_p', 'opcua_link_id', 'client_algorithm', 'client_signature', 'client_software_cert_link_id', 'opcua_locale_link_id', 'ext_obj_type_id_encoding_mask', 'ext_obj_type_id_namespace_idx', 'ext_obj_type_id_numeric', 'ext_obj_type_id_string', 'ext_obj_type_id_guid', 'ext_obj_type_id_opaque', 'ext_obj_type_id_str', 'ext_obj_encoding', 'ext_obj_policy_id', 'ext_obj_user_name', 'ext_obj_password', 'ext_obj_encryption_algorithom', 'ext_obj_certificate_data', 'ext_obj_token_data', 'user_token_algorithm', 'user_token_signature', 'server_nonce', 'status_code_link_id', 'activate_session_diag_info_link_id' ]"
            code => "event.set('[zeek_cols]', @zeek_opcua_binary_activate_session_field_names.zip(event.get('[message]')).to_h)"
          }
        }
      }

      mutate {
        id => "mutate_add_fields_zeek_opcua_binary_activate_session"
        add_field => {
          "[zeek_cols][proto]" => "tcp"
          "[zeek_cols][service]" => "opcua-binary"
        }
        add_tag => [ "ics" ]
      }

    } else if ([log_source] == "opcua_binary_activate_session_client_software_cert") {
      #############################################################################################################################
      # opcua_binary_activate_session_client_software_cert.log
      # variant-types.zeek (https://github.com/cisagov/icsnpp-opcua-binary)

      if ("_jsonparsesuccess" not in [tags]) {
        dissect {
          id => "dissect_zeek_opcua_binary_activate_session_client_software_cert"
          mapping => {
            "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][drop_orig_h]} %{[zeek_cols][drop_orig_p]} %{[zeek_cols][drop_resp_h]} %{[zeek_cols][drop_resp_p]} %{[zeek_cols][is_orig]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][client_software_cert_link_id]} %{[zeek_cols][cert_data]} %{[zeek_cols][cert_signature]}"
          }
        }
        if ("_dissectfailure" in [tags]) {
          mutate {
            id => "mutate_split_zeek_opcua_binary_activate_session_client_software_cert"
            split => { "[message]" => " " }
          }
          ruby {
            id => "ruby_zip_zeek_opcua_binary_activate_session_client_software_cert"
            init => "@zeek_opcua_binary_activate_session_client_software_cert_field_names = [ 'ts', 'uid', 'drop_orig_h', 'drop_orig_p', 'drop_resp_h', 'drop_resp_p', 'is_orig', 'orig_h', 'orig_p', 'resp_p', 'client_software_cert_link_id', 'cert_data', 'cert_signature' ]"
            code => "event.set('[zeek_cols]', @zeek_opcua_binary_activate_session_client_software_cert_field_names.zip(event.get('[message]')).to_h)"
          }
        }
      }

      mutate {
        id => "mutate_add_fields_zeek_opcua_binary_activate_session_client_software_cert"
        add_field => {
          "[zeek_cols][proto]" => "tcp"
          "[zeek_cols][service]" => "opcua-binary"
        }
        add_tag => [ "ics" ]
      }

    } else if ([log_source] == "opcua_binary_activate_session_locale_id") {
      #############################################################################################################################
      # opcua_binary_activate_session_locale_id.log
      # variant-types.zeek (https://github.com/cisagov/icsnpp-opcua-binary)

      if ("_jsonparsesuccess" not in [tags]) {
        dissect {
          id => "dissect_zeek_opcua_binary_activate_session_locale_id"
          mapping => {
            "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][drop_orig_h]} %{[zeek_cols][drop_orig_p]} %{[zeek_cols][drop_resp_h]} %{[zeek_cols][drop_resp_p]} %{[zeek_cols][is_orig]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][opcua_locale_link_id]} %{[zeek_cols][local_id]}"
          }
        }
        if ("_dissectfailure" in [tags]) {
          mutate {
            id => "mutate_split_zeek_opcua_binary_activate_session_locale_id"
            split => { "[message]" => " " }
          }
          ruby {
            id => "ruby_zip_zeek_opcua_binary_activate_session_locale_id"
            init => "@zeek_opcua_binary_activate_session_locale_id_field_names = [ 'ts', 'uid', 'drop_orig_h', 'drop_orig_p', 'drop_resp_h', 'drop_resp_p', 'is_orig', 'orig_h', 'orig_p', 'resp_p', 'opcua_locale_link_id', 'local_id' ]"
            code => "event.set('[zeek_cols]', @zeek_opcua_binary_activate_session_locale_id_field_names.zip(event.get('[message]')).to_h)"
          }
        }
      }

      mutate {
        id => "mutate_add_fields_zeek_opcua_binary_activate_session_locale_id"
        add_field => {
          "[zeek_cols][proto]" => "tcp"
          "[zeek_cols][service]" => "opcua-binary"
        }
        add_tag => [ "ics" ]
      }

    } else if ([log_source] == "opcua_binary_aggregate_filter") {
      #############################################################################################################################
      # opcua_binary_aggregate_filter.log
      # variant-types.zeek (https://github.com/cisagov/icsnpp-opcua-binary)

      if ("_jsonparsesuccess" not in [tags]) {
        dissect {
          id => "dissect_zeek_opcua_binary_aggregate_filter"
          mapping => {
            "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][drop_orig_h]} %{[zeek_cols][drop_orig_p]} %{[zeek_cols][drop_resp_h]} %{[zeek_cols][drop_resp_p]} %{[zeek_cols][is_orig]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][monitored_parameters_link_id]} %{[zeek_cols][start_time]} %{[zeek_cols][start_time_str]} %{[zeek_cols][aggregate_type_encoding_mask]} %{[zeek_cols][aggregate_type_namespace_idx]} %{[zeek_cols][aggregate_type_numeric]} %{[zeek_cols][aggregate_type_string]} %{[zeek_cols][aggregate_type_guid]} %{[zeek_cols][aggregate_type_opaque]} %{[zeek_cols][processing_interval]} %{[zeek_cols][use_server_capabilities_default]} %{[zeek_cols][treat_uncertain_as_bad]} %{[zeek_cols][percent_data_good]} %{[zeek_cols][percent_data_bad]} %{[zeek_cols][use_slopped_extrapolation]} %{[zeek_cols][revised_start_time]} %{[zeek_cols][revised_start_time_str]} %{[zeek_cols][revised_processing_interval]} %{[zeek_cols][revised_use_server_capabilities_default]} %{[zeek_cols][revised_treat_uncertain_as_bad]} %{[zeek_cols][revised_percent_data_good]} %{[zeek_cols][revised_percent_data_bad]} %{[zeek_cols][revised_use_slopped_extrapolation]}"
          }
        }
        if ("_dissectfailure" in [tags]) {
          mutate {
            id => "mutate_split_zeek_opcua_binary_aggregate_filter"
            split => { "[message]" => " " }
          }
          ruby {
            id => "ruby_zip_zeek_opcua_binary_aggregate_filter"
            init => "@zeek_opcua_binary_aggregate_filter_field_names = [ 'ts', 'uid', 'drop_orig_h', 'drop_orig_p', 'drop_resp_h', 'drop_resp_p', 'is_orig', 'orig_h', 'orig_p', 'resp_p', 'monitored_parameters_link_id', 'start_time', 'start_time_str', 'aggregate_type_encoding_mask', 'aggregate_type_namespace_idx', 'aggregate_type_numeric', 'aggregate_type_string', 'aggregate_type_guid', 'aggregate_type_opaque', 'processing_interval', 'use_server_capabilities_default', 'treat_uncertain_as_bad', 'percent_data_good', 'percent_data_bad', 'use_slopped_extrapolation', 'revised_start_time', 'revised_start_time_str', 'revised_processing_interval', 'revised_use_server_capabilities_default', 'revised_treat_uncertain_as_bad', 'revised_percent_data_good', 'revised_percent_data_bad', 'revised_use_slopped_extrapolation' ]"
            code => "event.set('[zeek_cols]', @zeek_opcua_binary_aggregate_filter_field_names.zip(event.get('[message]')).to_h)"
          }
        }
      }

      mutate {
        id => "mutate_add_fields_zeek_opcua_binary_aggregate_filter"
        add_field => {
          "[zeek_cols][proto]" => "tcp"
          "[zeek_cols][service]" => "opcua-binary"
        }
        add_tag => [ "ics" ]
      }

    } else if ([log_source] == "opcua_binary_event_filter_attribute_operand") {
      #############################################################################################################################
      # opcua_binary_event_filter_attribute_operand.log
      # variant-types.zeek (https://github.com/cisagov/icsnpp-opcua-binary)

      if ("_jsonparsesuccess" not in [tags]) {
        dissect {
          id => "dissect_zeek_opcua_binary_event_filter_attribute_operand"
          mapping => {
            "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][drop_orig_h]} %{[zeek_cols][drop_orig_p]} %{[zeek_cols][drop_resp_h]} %{[zeek_cols][drop_resp_p]} %{[zeek_cols][is_orig]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][content_filter_filter_operand_link_id]} %{[zeek_cols][node_id_encoding_mask]} %{[zeek_cols][node_id_namespace_idx]} %{[zeek_cols][node_id_numeric]} %{[zeek_cols][node_id_string]} %{[zeek_cols][node_id_guid]} %{[zeek_cols][node_id_opaque]} %{[zeek_cols][alias]} %{[zeek_cols][browse_path_element_link_id]} %{[zeek_cols][attribute]} %{[zeek_cols][index_range]}"
          }
        }
        if ("_dissectfailure" in [tags]) {
          mutate {
            id => "mutate_split_zeek_opcua_binary_event_filter_attribute_operand"
            split => { "[message]" => " " }
          }
          ruby {
            id => "ruby_zip_zeek_opcua_binary_event_filter_attribute_operand"
            init => "@zeek_opcua_binary_event_filter_attribute_operand_field_names = [ 'ts', 'uid', 'drop_orig_h', 'drop_orig_p', 'drop_resp_h', 'drop_resp_p', 'is_orig', 'orig_h', 'orig_p', 'resp_p', 'content_filter_filter_operand_link_id', 'node_id_encoding_mask', 'node_id_namespace_idx', 'node_id_numeric', 'node_id_string', 'node_id_guid', 'node_id_opaque', 'alias', 'browse_path_element_link_id', 'attribute', 'index_range' ]"
            code => "event.set('[zeek_cols]', @zeek_opcua_binary_event_filter_attribute_operand_field_names.zip(event.get('[message]')).to_h)"
          }
        }
      }

      mutate {
        id => "mutate_add_fields_zeek_opcua_binary_event_filter_attribute_operand"
        add_field => {
          "[zeek_cols][proto]" => "tcp"
          "[zeek_cols][service]" => "opcua-binary"
        }
        add_tag => [ "ics" ]
      }

    } else if ([log_source] == "opcua_binary_event_filter_attribute_operand_browse_paths") {
      #############################################################################################################################
      # opcua_binary_event_filter_attribute_operand_browse_paths.log
      # variant-types.zeek (https://github.com/cisagov/icsnpp-opcua-binary)

      if ("_jsonparsesuccess" not in [tags]) {
        dissect {
          id => "dissect_zeek_opcua_binary_event_filter_attribute_operand_browse_paths"
          mapping => {
            "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][drop_orig_h]} %{[zeek_cols][drop_orig_p]} %{[zeek_cols][drop_resp_h]} %{[zeek_cols][drop_resp_p]} %{[zeek_cols][is_orig]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][browse_path_element_link_id]} %{[zeek_cols][type_id_encoding_mask]} %{[zeek_cols][type_id_namespace_idx]} %{[zeek_cols][type_id_numeric]} %{[zeek_cols][type_id_string]} %{[zeek_cols][type_id_guid]} %{[zeek_cols][type_id_opaque]} %{[zeek_cols][is_inverse]} %{[zeek_cols][include_subtypes]} %{[zeek_cols][target_name_namespace_idx]} %{[zeek_cols][target_name]}"
          }
        }
        if ("_dissectfailure" in [tags]) {
          mutate {
            id => "mutate_split_zeek_opcua_binary_event_filter_attribute_operand_browse_paths"
            split => { "[message]" => " " }
          }
          ruby {
            id => "ruby_zip_zeek_opcua_binary_event_filter_attribute_operand_browse_paths"
            init => "@zeek_opcua_binary_event_filter_attribute_operand_browse_paths_field_names = [ 'ts', 'uid', 'drop_orig_h', 'drop_orig_p', 'drop_resp_h', 'drop_resp_p', 'is_orig', 'orig_h', 'orig_p', 'resp_p', 'browse_path_element_link_id', 'type_id_encoding_mask', 'type_id_namespace_idx', 'type_id_numeric', 'type_id_string', 'type_id_guid', 'type_id_opaque', 'is_inverse', 'include_subtypes', 'target_name_namespace_idx', 'target_name' ]"
            code => "event.set('[zeek_cols]', @zeek_opcua_binary_event_filter_attribute_operand_browse_paths_field_names.zip(event.get('[message]')).to_h)"
          }
        }
      }

      mutate {
        id => "mutate_add_fields_zeek_opcua_binary_event_filter_attribute_operand_browse_paths"
        add_field => {
          "[zeek_cols][proto]" => "tcp"
          "[zeek_cols][service]" => "opcua-binary"
        }
        add_tag => [ "ics" ]
      }

    } else if ([log_source] == "opcua_binary_browse") {
      #############################################################################################################################
      # opcua_binary_browse.log
      # variant-types.zeek (https://github.com/cisagov/icsnpp-opcua-binary)

      if ("_jsonparsesuccess" not in [tags]) {
        dissect {
          id => "dissect_zeek_opcua_binary_browse"
          mapping => {
            "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][drop_orig_h]} %{[zeek_cols][drop_orig_p]} %{[zeek_cols][drop_resp_h]} %{[zeek_cols][drop_resp_p]} %{[zeek_cols][is_orig]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][opcua_link_id]} %{[zeek_cols][browse_service_type]} %{[zeek_cols][browse_view_id_encoding_mask]} %{[zeek_cols][browse_view_id_namespace_idx]} %{[zeek_cols][browse_view_id_numeric]} %{[zeek_cols][browse_view_id_string]} %{[zeek_cols][browse_view_id_guid]} %{[zeek_cols][browse_view_id_opaque]} %{[zeek_cols][browse_view_description_timestamp]} %{[zeek_cols][browse_view_description_view_version]} %{[zeek_cols][req_max_ref_nodes]} %{[zeek_cols][browse_description_link_id]} %{[zeek_cols][browse_next_release_continuation_point]} %{[zeek_cols][browse_next_link_id]} %{[zeek_cols][browse_response_link_id]} %{[zeek_cols][browse_diag_info_link_id]}"
          }
        }
        if ("_dissectfailure" in [tags]) {
          mutate {
            id => "mutate_split_zeek_opcua_binary_browse"
            split => { "[message]" => " " }
          }
          ruby {
            id => "ruby_zip_zeek_opcua_binary_browse"
            init => "@zeek_opcua_binary_browse_field_names = [ 'ts', 'uid', 'drop_orig_h', 'drop_orig_p', 'drop_resp_h', 'drop_resp_p', 'is_orig', 'orig_h', 'orig_p', 'resp_p', 'opcua_link_id', 'browse_service_type', 'browse_view_id_encoding_mask', 'browse_view_id_namespace_idx', 'browse_view_id_numeric', 'browse_view_id_string', 'browse_view_id_guid', 'browse_view_id_opaque', 'browse_view_description_timestamp', 'browse_view_description_view_version', 'req_max_ref_nodes', 'browse_description_link_id', 'browse_next_release_continuation_point', 'browse_next_link_id', 'browse_response_link_id', 'browse_diag_info_link_id' ]"
            code => "event.set('[zeek_cols]', @zeek_opcua_binary_browse_field_names.zip(event.get('[message]')).to_h)"
          }
        }
      }

      mutate {
        id => "mutate_add_fields_zeek_opcua_binary_browse"
        add_field => {
          "[zeek_cols][proto]" => "tcp"
          "[zeek_cols][service]" => "opcua-binary"
        }
        add_tag => [ "ics" ]
      }

    } else if ([log_source] == "opcua_binary_browse_description") {
      #############################################################################################################################
      # opcua_binary_browse_description.log
      # variant-types.zeek (https://github.com/cisagov/icsnpp-opcua-binary)

      if ("_jsonparsesuccess" not in [tags]) {
        dissect {
          id => "dissect_zeek_opcua_binary_browse_description"
          mapping => {
            "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][drop_orig_h]} %{[zeek_cols][drop_orig_p]} %{[zeek_cols][drop_resp_h]} %{[zeek_cols][drop_resp_p]} %{[zeek_cols][is_orig]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][browse_description_link_id]} %{[zeek_cols][browse_description_encoding_mask]} %{[zeek_cols][browse_description_namespace_idx]} %{[zeek_cols][browse_description_numeric]} %{[zeek_cols][browse_description_string]} %{[zeek_cols][browse_description_guid]} %{[zeek_cols][browse_description_opaque]} %{[zeek_cols][browse_direction]} %{[zeek_cols][browse_description_ref_encoding_mask]} %{[zeek_cols][browse_description_ref_namespace_idx]} %{[zeek_cols][browse_description_ref_numeric]} %{[zeek_cols][browse_description_ref_string]} %{[zeek_cols][browse_description_ref_guid]} %{[zeek_cols][browse_description_ref_opaque]} %{[zeek_cols][browse_description_include_subtypes]} %{[zeek_cols][browse_node_class_mask]} %{[zeek_cols][browse_result_mask]}"
          }
        }
        if ("_dissectfailure" in [tags]) {
          mutate {
            id => "mutate_split_zeek_opcua_binary_browse_description"
            split => { "[message]" => " " }
          }
          ruby {
            id => "ruby_zip_zeek_opcua_binary_browse_description"
            init => "@zeek_opcua_binary_browse_description_field_names = [ 'ts', 'uid', 'drop_orig_h', 'drop_orig_p', 'drop_resp_h', 'drop_resp_p', 'is_orig', 'orig_h', 'orig_p', 'resp_p', 'browse_description_link_id', 'browse_description_encoding_mask', 'browse_description_namespace_idx', 'browse_description_numeric', 'browse_description_string', 'browse_description_guid', 'browse_description_opaque', 'browse_direction', 'browse_description_ref_encoding_mask', 'browse_description_ref_namespace_idx', 'browse_description_ref_numeric', 'browse_description_ref_string', 'browse_description_ref_guid', 'browse_description_ref_opaque', 'browse_description_include_subtypes', 'browse_node_class_mask', 'browse_result_mask' ]"
            code => "event.set('[zeek_cols]', @zeek_opcua_binary_browse_description_field_names.zip(event.get('[message]')).to_h)"
          }
        }
      }

      mutate {
        id => "mutate_add_fields_zeek_opcua_binary_browse_description"
        add_field => {
          "[zeek_cols][proto]" => "tcp"
          "[zeek_cols][service]" => "opcua-binary"
        }
        add_tag => [ "ics" ]
      }

    } else if ([log_source] == "opcua_binary_browse_response_references") {
      #############################################################################################################################
      # opcua_binary_browse_response_references.log
      # variant-types.zeek (https://github.com/cisagov/icsnpp-opcua-binary)

      if ("_jsonparsesuccess" not in [tags]) {
        dissect {
          id => "dissect_zeek_opcua_binary_browse_response_references"
          mapping => {
            "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][drop_orig_h]} %{[zeek_cols][drop_orig_p]} %{[zeek_cols][drop_resp_h]} %{[zeek_cols][drop_resp_p]} %{[zeek_cols][is_orig]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][browse_reference_link_id]} %{[zeek_cols][browse_response_ref_encoding_mask]} %{[zeek_cols][browse_response_ref_namespace_idx]} %{[zeek_cols][browse_response_ref_numeric]} %{[zeek_cols][browse_response_ref_string]} %{[zeek_cols][browse_response_ref_guid]} %{[zeek_cols][browse_response_ref_opaque]} %{[zeek_cols][browse_response_is_forward]} %{[zeek_cols][browse_response_ref_type_encoding_mask]} %{[zeek_cols][browse_response_ref_type_namespace_idx]} %{[zeek_cols][browse_response_ref_type_numeric]} %{[zeek_cols][browse_response_ref_type_string]} %{[zeek_cols][browse_response_ref_type_guid]} %{[zeek_cols][browse_response_ref_type_opaque]} %{[zeek_cols][browse_response_ref_type_namespace_uri]} %{[zeek_cols][browse_response_ref_type_server_idx]} %{[zeek_cols][browse_response_ref_name_idx]} %{[zeek_cols][browse_response_ref_name]} %{[zeek_cols][browse_response_display_name_mask]} %{[zeek_cols][browse_response_display_name_locale]} %{[zeek_cols][browse_response_display_name_text]} %{[zeek_cols][browse_response_node_class]} %{[zeek_cols][browse_response_type_def_encoding_mask]} %{[zeek_cols][browse_response_type_def_namespace_idx]} %{[zeek_cols][browse_response_type_def_numeric]} %{[zeek_cols][browse_response_type_def_string]} %{[zeek_cols][browse_response_type_def_guid]} %{[zeek_cols][browse_response_type_def_opaque]} %{[zeek_cols][browse_response_type_def_namespace_uri]} %{[zeek_cols][browse_response_type_def_server_idx]}"
          }
        }
        if ("_dissectfailure" in [tags]) {
          mutate {
            id => "mutate_split_zeek_opcua_binary_browse_response_references"
            split => { "[message]" => " " }
          }
          ruby {
            id => "ruby_zip_zeek_opcua_binary_browse_response_references"
            init => "@zeek_opcua_binary_browse_response_references_field_names = [ 'ts', 'uid', 'drop_orig_h', 'drop_orig_p', 'drop_resp_h', 'drop_resp_p', 'is_orig', 'orig_h', 'orig_p', 'resp_p', 'browse_reference_link_id', 'browse_response_ref_encoding_mask', 'browse_response_ref_namespace_idx', 'browse_response_ref_numeric', 'browse_response_ref_string', 'browse_response_ref_guid', 'browse_response_ref_opaque', 'browse_response_is_forward', 'browse_response_ref_type_encoding_mask', 'browse_response_ref_type_namespace_idx', 'browse_response_ref_type_numeric', 'browse_response_ref_type_string', 'browse_response_ref_type_guid', 'browse_response_ref_type_opaque', 'browse_response_ref_type_namespace_uri', 'browse_response_ref_type_server_idx', 'browse_response_ref_name_idx', 'browse_response_ref_name', 'browse_response_display_name_mask', 'browse_response_display_name_locale', 'browse_response_display_name_text', 'browse_response_node_class', 'browse_response_type_def_encoding_mask', 'browse_response_type_def_namespace_idx', 'browse_response_type_def_numeric', 'browse_response_type_def_string', 'browse_response_type_def_guid', 'browse_response_type_def_opaque', 'browse_response_type_def_namespace_uri', 'browse_response_type_def_server_idx' ]"
            code => "event.set('[zeek_cols]', @zeek_opcua_binary_browse_response_references_field_names.zip(event.get('[message]')).to_h)"
          }
        }
      }

      mutate {
        id => "mutate_add_fields_zeek_opcua_binary_browse_response_references"
        add_field => {
          "[zeek_cols][proto]" => "tcp"
          "[zeek_cols][service]" => "opcua-binary"
        }
        add_tag => [ "ics" ]
      }

    } else if ([log_source] == "opcua_binary_browse_request_continuation_point") {
      #############################################################################################################################
      # opcua_binary_browse_request_continuation_point.log
      # variant-types.zeek (https://github.com/cisagov/icsnpp-opcua-binary)

      if ("_jsonparsesuccess" not in [tags]) {
        dissect {
          id => "dissect_zeek_opcua_binary_browse_request_continuation_point"
          mapping => {
            "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][drop_orig_h]} %{[zeek_cols][drop_orig_p]} %{[zeek_cols][drop_resp_h]} %{[zeek_cols][drop_resp_p]} %{[zeek_cols][is_orig]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][browse_next_link_id]} %{[zeek_cols][continuation_point]}"
          }
        }
        if ("_dissectfailure" in [tags]) {
          mutate {
            id => "mutate_split_zeek_opcua_binary_browse_request_continuation_point"
            split => { "[message]" => " " }
          }
          ruby {
            id => "ruby_zip_zeek_opcua_binary_browse_request_continuation_point"
            init => "@zeek_opcua_binary_browse_request_continuation_point_field_names = [ 'ts', 'uid', 'drop_orig_h', 'drop_orig_p', 'drop_resp_h', 'drop_resp_p', 'is_orig', 'orig_h', 'orig_p', 'resp_p', 'browse_next_link_id', 'continuation_point' ]"
            code => "event.set('[zeek_cols]', @zeek_opcua_binary_browse_request_continuation_point_field_names.zip(event.get('[message]')).to_h)"
          }
        }
      }

      mutate {
        id => "mutate_add_fields_zeek_opcua_binary_browse_request_continuation_point"
        add_field => {
          "[zeek_cols][proto]" => "tcp"
          "[zeek_cols][service]" => "opcua-binary"
        }
        add_tag => [ "ics" ]
      }

    } else if ([log_source] == "opcua_binary_browse_result") {
      #############################################################################################################################
      # opcua_binary_browse_result.log
      # variant-types.zeek (https://github.com/cisagov/icsnpp-opcua-binary)

      if ("_jsonparsesuccess" not in [tags]) {
        dissect {
          id => "dissect_zeek_opcua_binary_browse_result"
          mapping => {
            "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][drop_orig_h]} %{[zeek_cols][drop_orig_p]} %{[zeek_cols][drop_resp_h]} %{[zeek_cols][drop_resp_p]} %{[zeek_cols][is_orig]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][browse_response_link_id]} %{[zeek_cols][status_code_link_id]} %{[zeek_cols][browse_result_continuation_point]} %{[zeek_cols][browse_reference_link_id]}"
          }
        }
        if ("_dissectfailure" in [tags]) {
          mutate {
            id => "mutate_split_zeek_opcua_binary_browse_result"
            split => { "[message]" => " " }
          }
          ruby {
            id => "ruby_zip_zeek_opcua_binary_browse_result"
            init => "@zeek_opcua_binary_browse_result_field_names = [ 'ts', 'uid', 'drop_orig_h', 'drop_orig_p', 'drop_resp_h', 'drop_resp_p', 'is_orig', 'orig_h', 'orig_p', 'resp_p', 'browse_response_link_id', 'status_code_link_id', 'browse_result_continuation_point', 'browse_reference_link_id' ]"
            code => "event.set('[zeek_cols]', @zeek_opcua_binary_browse_result_field_names.zip(event.get('[message]')).to_h)"
          }
        }
      }

      mutate {
        id => "mutate_add_fields_zeek_opcua_binary_browse_result"
        add_field => {
          "[zeek_cols][proto]" => "tcp"
          "[zeek_cols][service]" => "opcua-binary"
        }
        add_tag => [ "ics" ]
      }

    } else if ([log_source] == "opcua_binary_close_session") {
      #############################################################################################################################
      # opcua_binary_close_session.log
      # variant-types.zeek (https://github.com/cisagov/icsnpp-opcua-binary)

      if ("_jsonparsesuccess" not in [tags]) {
        dissect {
          id => "dissect_zeek_opcua_binary_close_session"
          mapping => {
            "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][drop_orig_h]} %{[zeek_cols][drop_orig_p]} %{[zeek_cols][drop_resp_h]} %{[zeek_cols][drop_resp_p]} %{[zeek_cols][is_orig]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][opcua_link_id]} %{[zeek_cols][del_subscriptions]}"
          }
        }
        if ("_dissectfailure" in [tags]) {
          mutate {
            id => "mutate_split_zeek_opcua_binary_close_session"
            split => { "[message]" => " " }
          }
          ruby {
            id => "ruby_zip_zeek_opcua_binary_close_session"
            init => "@zeek_opcua_binary_close_session_field_names = [ 'ts', 'uid', 'drop_orig_h', 'drop_orig_p', 'drop_resp_h', 'drop_resp_p', 'is_orig', 'orig_h', 'orig_p', 'resp_p', 'opcua_link_id', 'del_subscriptions' ]"
            code => "event.set('[zeek_cols]', @zeek_opcua_binary_close_session_field_names.zip(event.get('[message]')).to_h)"
          }
        }
      }

      mutate {
        id => "mutate_add_fields_zeek_opcua_binary_close_session"
        add_field => {
          "[zeek_cols][proto]" => "tcp"
          "[zeek_cols][service]" => "opcua-binary"
        }
        add_tag => [ "ics" ]
      }

    } else if ([log_source] == "opcua_binary_event_filter_where_clause") {
      #############################################################################################################################
      # opcua_binary_event_filter_where_clause.log
      # variant-types.zeek (https://github.com/cisagov/icsnpp-opcua-binary)

      if ("_jsonparsesuccess" not in [tags]) {
        dissect {
          id => "dissect_zeek_opcua_binary_event_filter_where_clause"
          mapping => {
            "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][drop_orig_h]} %{[zeek_cols][drop_orig_p]} %{[zeek_cols][drop_resp_h]} %{[zeek_cols][drop_resp_p]} %{[zeek_cols][is_orig]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][where_clause_link_id]} %{[zeek_cols][content_filter_element_link_id]} %{[zeek_cols][content_filter_status_code_link_id]} %{[zeek_cols][content_filter_diag_info_link_id]}"
          }
        }
        if ("_dissectfailure" in [tags]) {
          mutate {
            id => "mutate_split_zeek_opcua_binary_event_filter_where_clause"
            split => { "[message]" => " " }
          }
          ruby {
            id => "ruby_zip_zeek_opcua_binary_event_filter_where_clause"
            init => "@zeek_opcua_binary_event_filter_where_clause_field_names = [ 'ts', 'uid', 'drop_orig_h', 'drop_orig_p', 'drop_resp_h', 'drop_resp_p', 'is_orig', 'orig_h', 'orig_p', 'resp_p', 'where_clause_link_id', 'content_filter_element_link_id', 'content_filter_status_code_link_id', 'content_filter_diag_info_link_id' ]"
            code => "event.set('[zeek_cols]', @zeek_opcua_binary_event_filter_where_clause_field_names.zip(event.get('[message]')).to_h)"
          }
        }
      }

      mutate {
        id => "mutate_add_fields_zeek_opcua_binary_event_filter_where_clause"
        add_field => {
          "[zeek_cols][proto]" => "tcp"
          "[zeek_cols][service]" => "opcua-binary"
        }
        add_tag => [ "ics" ]
      }

    } else if ([log_source] == "opcua_binary_event_filter_where_clause_elements") {
      #############################################################################################################################
      # opcua_binary_event_filter_where_clause_elements.log
      # variant-types.zeek (https://github.com/cisagov/icsnpp-opcua-binary)

      if ("_jsonparsesuccess" not in [tags]) {
        dissect {
          id => "dissect_zeek_opcua_binary_event_filter_where_clause_elements"
          mapping => {
            "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][drop_orig_h]} %{[zeek_cols][drop_orig_p]} %{[zeek_cols][drop_resp_h]} %{[zeek_cols][drop_resp_p]} %{[zeek_cols][is_orig]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][content_filter_element_link_id]} %{[zeek_cols][filter_operator]} %{[zeek_cols][content_filter_filter_operand_type_id_node_id_encoding_mask]} %{[zeek_cols][content_filter_filter_operand_type_id_node_id_namespace_idx]} %{[zeek_cols][content_filter_filter_operand_type_id_node_id_numeric]} %{[zeek_cols][content_filter_filter_operand_type_id_node_id_string]} %{[zeek_cols][content_filter_filter_operand_type_id_node_id_guid]} %{[zeek_cols][content_filter_filter_operand_type_id_node_id_opaque]} %{[zeek_cols][content_filter_filter_operand_type_id_string]} %{[zeek_cols][content_filter_filter_operand_type_id_encoding]} %{[zeek_cols][content_filter_filter_operand_link_id]} %{[zeek_cols][content_filter_operand_status_code_link_id]} %{[zeek_cols][content_filter_operand_diag_info_link_id]}"
          }
        }
        if ("_dissectfailure" in [tags]) {
          mutate {
            id => "mutate_split_zeek_opcua_binary_event_filter_where_clause_elements"
            split => { "[message]" => " " }
          }
          ruby {
            id => "ruby_zip_zeek_opcua_binary_event_filter_where_clause_elements"
            init => "@zeek_opcua_binary_event_filter_where_clause_elements_field_names = [ 'ts', 'uid', 'drop_orig_h', 'drop_orig_p', 'drop_resp_h', 'drop_resp_p', 'is_orig', 'orig_h', 'orig_p', 'resp_p', 'content_filter_element_link_id', 'filter_operator', 'content_filter_filter_operand_type_id_node_id_encoding_mask', 'content_filter_filter_operand_type_id_node_id_namespace_idx', 'content_filter_filter_operand_type_id_node_id_numeric', 'content_filter_filter_operand_type_id_node_id_string', 'content_filter_filter_operand_type_id_node_id_guid', 'content_filter_filter_operand_type_id_node_id_opaque', 'content_filter_filter_operand_type_id_string', 'content_filter_filter_operand_type_id_encoding', 'content_filter_filter_operand_link_id', 'content_filter_operand_status_code_link_id', 'content_filter_operand_diag_info_link_id' ]"
            code => "event.set('[zeek_cols]', @zeek_opcua_binary_event_filter_where_clause_elements_field_names.zip(event.get('[message]')).to_h)"
          }
        }
      }

      mutate {
        id => "mutate_add_fields_zeek_opcua_binary_event_filter_where_clause_elements"
        add_field => {
          "[zeek_cols][proto]" => "tcp"
          "[zeek_cols][service]" => "opcua-binary"
        }
        add_tag => [ "ics" ]
      }

    } else if ([log_source] == "opcua_binary_create_monitored_items") {
      #############################################################################################################################
      # opcua_binary_create_monitored_items.log
      # variant-types.zeek (https://github.com/cisagov/icsnpp-opcua-binary)

      if ("_jsonparsesuccess" not in [tags]) {
        dissect {
          id => "dissect_zeek_opcua_binary_create_monitored_items"
          mapping => {
            "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][drop_orig_h]} %{[zeek_cols][drop_orig_p]} %{[zeek_cols][drop_resp_h]} %{[zeek_cols][drop_resp_p]} %{[zeek_cols][is_orig]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][opcua_link_id]} %{[zeek_cols][subscription_id]} %{[zeek_cols][timestamps_to_return]} %{[zeek_cols][timestamps_to_return_str]} %{[zeek_cols][create_item_link_id]} %{[zeek_cols][create_monitored_items_diag_info_link_id]}"
          }
        }
        if ("_dissectfailure" in [tags]) {
          mutate {
            id => "mutate_split_zeek_opcua_binary_create_monitored_items"
            split => { "[message]" => " " }
          }
          ruby {
            id => "ruby_zip_zeek_opcua_binary_create_monitored_items"
            init => "@zeek_opcua_binary_create_monitored_items_field_names = [ 'ts', 'uid', 'drop_orig_h', 'drop_orig_p', 'drop_resp_h', 'drop_resp_p', 'is_orig', 'orig_h', 'orig_p', 'resp_p', 'opcua_link_id', 'subscription_id', 'timestamps_to_return', 'timestamps_to_return_str', 'create_item_link_id', 'create_monitored_items_diag_info_link_id' ]"
            code => "event.set('[zeek_cols]', @zeek_opcua_binary_create_monitored_items_field_names.zip(event.get('[message]')).to_h)"
          }
        }
      }

      mutate {
        id => "mutate_add_fields_zeek_opcua_binary_create_monitored_items"
        add_field => {
          "[zeek_cols][proto]" => "tcp"
          "[zeek_cols][service]" => "opcua-binary"
        }
        add_tag => [ "ics" ]
      }

    } else if ([log_source] == "opcua_binary_create_monitored_items_create_item") {
      #############################################################################################################################
      # opcua_binary_create_monitored_items_create_item.log
      # variant-types.zeek (https://github.com/cisagov/icsnpp-opcua-binary)

      if ("_jsonparsesuccess" not in [tags]) {
        dissect {
          id => "dissect_zeek_opcua_binary_create_monitored_items_create_item"
          mapping => {
            "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][drop_orig_h]} %{[zeek_cols][drop_orig_p]} %{[zeek_cols][drop_resp_h]} %{[zeek_cols][drop_resp_p]} %{[zeek_cols][is_orig]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][create_item_link_id]} %{[zeek_cols][item_to_monitor_node_id_encoding_mask]} %{[zeek_cols][item_to_monitor_node_id_namespace_idx]} %{[zeek_cols][item_to_monitor_node_id_numeric]} %{[zeek_cols][item_to_monitor_node_id_string]} %{[zeek_cols][item_to_monitor_node_id_guid]} %{[zeek_cols][item_to_monitor_node_id_opaque]} %{[zeek_cols][item_to_monitor_attribute_id]} %{[zeek_cols][item_to_monitor_index_range]} %{[zeek_cols][item_to_monitor_namespace_idx]} %{[zeek_cols][item_to_monitor_name]} %{[zeek_cols][monitoring_mode]} %{[zeek_cols][monitoring_parameters_client_handle]} %{[zeek_cols][monitoring_parameters_sampling_interval]} %{[zeek_cols][monitoring_parameters_queue_size]} %{[zeek_cols][monitoring_parameters_discard_oldest]} %{[zeek_cols][monitoring_parameters_filter_info_type_id_node_id_encoding_mask]} %{[zeek_cols][monitoring_parameters_filter_info_type_id_node_id_namespace_idx]} %{[zeek_cols][monitoring_parameters_filter_info_type_id_node_id_numeric]} %{[zeek_cols][monitoring_parameters_filter_info_type_id_node_id_string]} %{[zeek_cols][monitoring_parameters_filter_info_type_id_node_id_guid]} %{[zeek_cols][monitoring_parameters_filter_info_type_id_node_id_opaque]} %{[zeek_cols][monitoring_parameters_filter_info_type_id_string]} %{[zeek_cols][monitoring_parameters_filter_info_type_id_encoding]} %{[zeek_cols][filter_info_details_link_id]} %{[zeek_cols][monitoring_parameters_status_code_link_id]} %{[zeek_cols][monitored_item_index_id]} %{[zeek_cols][monitoring_parameters_revised_sampling_interval]} %{[zeek_cols][monitoring_parameters_revised_queue_size]}"
          }
        }
        if ("_dissectfailure" in [tags]) {
          mutate {
            id => "mutate_split_zeek_opcua_binary_create_monitored_items_create_item"
            split => { "[message]" => " " }
          }
          ruby {
            id => "ruby_zip_zeek_opcua_binary_create_monitored_items_create_item"
            init => "@zeek_opcua_binary_create_monitored_items_create_item_field_names = [ 'ts', 'uid', 'drop_orig_h', 'drop_orig_p', 'drop_resp_h', 'drop_resp_p', 'is_orig', 'orig_h', 'orig_p', 'resp_p', 'create_item_link_id', 'item_to_monitor_node_id_encoding_mask', 'item_to_monitor_node_id_namespace_idx', 'item_to_monitor_node_id_numeric', 'item_to_monitor_node_id_string', 'item_to_monitor_node_id_guid', 'item_to_monitor_node_id_opaque', 'item_to_monitor_attribute_id', 'item_to_monitor_index_range', 'item_to_monitor_namespace_idx', 'item_to_monitor_name', 'monitoring_mode', 'monitoring_parameters_client_handle', 'monitoring_parameters_sampling_interval', 'monitoring_parameters_queue_size', 'monitoring_parameters_discard_oldest', 'monitoring_parameters_filter_info_type_id_node_id_encoding_mask', 'monitoring_parameters_filter_info_type_id_node_id_namespace_idx', 'monitoring_parameters_filter_info_type_id_node_id_numeric', 'monitoring_parameters_filter_info_type_id_node_id_string', 'monitoring_parameters_filter_info_type_id_node_id_guid', 'monitoring_parameters_filter_info_type_id_node_id_opaque', 'monitoring_parameters_filter_info_type_id_string', 'monitoring_parameters_filter_info_type_id_encoding', 'filter_info_details_link_id', 'monitoring_parameters_status_code_link_id', 'monitored_item_index_id', 'monitoring_parameters_revised_sampling_interval', 'monitoring_parameters_revised_queue_size' ]"
            code => "event.set('[zeek_cols]', @zeek_opcua_binary_create_monitored_items_create_item_field_names.zip(event.get('[message]')).to_h)"
          }
        }
      }

      mutate {
        id => "mutate_add_fields_zeek_opcua_binary_create_monitored_items_create_item"
        add_field => {
          "[zeek_cols][proto]" => "tcp"
          "[zeek_cols][service]" => "opcua-binary"
        }
        add_tag => [ "ics" ]
      }

    } else if ([log_source] == "opcua_binary_create_session") {
      #############################################################################################################################
      # opcua_binary_create_session.log
      # variant-types.zeek (https://github.com/cisagov/icsnpp-opcua-binary)

      if ("_jsonparsesuccess" not in [tags]) {
        dissect {
          id => "dissect_zeek_opcua_binary_create_session"
          mapping => {
            "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][drop_orig_h]} %{[zeek_cols][drop_orig_p]} %{[zeek_cols][drop_resp_h]} %{[zeek_cols][drop_resp_p]} %{[zeek_cols][is_orig]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][opcua_link_id]} %{[zeek_cols][application_uri]} %{[zeek_cols][product_uri]} %{[zeek_cols][encoding_mask]} %{[zeek_cols][locale]} %{[zeek_cols][text]} %{[zeek_cols][application_type]} %{[zeek_cols][gateway_server_uri]} %{[zeek_cols][discovery_profile_uri]} %{[zeek_cols][discovery_profile_link_id]} %{[zeek_cols][server_uri]} %{[zeek_cols][endpoint_url]} %{[zeek_cols][session_name]} %{[zeek_cols][client_nonce]} %{[zeek_cols][client_cert_size]} %{[zeek_cols][client_cert]} %{[zeek_cols][req_session_timeout]} %{[zeek_cols][max_res_msg_size]} %{[zeek_cols][session_id_encoding_mask]} %{[zeek_cols][session_id_namespace_idx]} %{[zeek_cols][session_id_numeric]} %{[zeek_cols][session_id_string]} %{[zeek_cols][session_id_guid]} %{[zeek_cols][session_id_opaque]} %{[zeek_cols][auth_token_encoding_mask]} %{[zeek_cols][auth_token_namespace_idx]} %{[zeek_cols][auth_token_numeric]} %{[zeek_cols][auth_token_string]} %{[zeek_cols][auth_token_guid]} %{[zeek_cols][auth_token_opaque]} %{[zeek_cols][revised_session_timeout]} %{[zeek_cols][server_nonce]} %{[zeek_cols][server_cert_size]} %{[zeek_cols][server_cert]} %{[zeek_cols][endpoint_link_id]} %{[zeek_cols][algorithm]} %{[zeek_cols][signature]} %{[zeek_cols][max_req_msg_size]}"
          }
        }
        if ("_dissectfailure" in [tags]) {
          mutate {
            id => "mutate_split_zeek_opcua_binary_create_session"
            split => { "[message]" => " " }
          }
          ruby {
            id => "ruby_zip_zeek_opcua_binary_create_session"
            init => "@zeek_opcua_binary_create_session_field_names = [ 'ts', 'uid', 'drop_orig_h', 'drop_orig_p', 'drop_resp_h', 'drop_resp_p', 'is_orig', 'orig_h', 'orig_p', 'resp_p', 'opcua_link_id', 'application_uri', 'product_uri', 'encoding_mask', 'locale', 'text', 'application_type', 'gateway_server_uri', 'discovery_profile_uri', 'discovery_profile_link_id', 'server_uri', 'endpoint_url', 'session_name', 'client_nonce', 'client_cert_size', 'client_cert', 'req_session_timeout', 'max_res_msg_size', 'session_id_encoding_mask', 'session_id_namespace_idx', 'session_id_numeric', 'session_id_string', 'session_id_guid', 'session_id_opaque', 'auth_token_encoding_mask', 'auth_token_namespace_idx', 'auth_token_numeric', 'auth_token_string', 'auth_token_guid', 'auth_token_opaque', 'revised_session_timeout', 'server_nonce', 'server_cert_size', 'server_cert', 'endpoint_link_id', 'algorithm', 'signature', 'max_req_msg_size' ]"
            code => "event.set('[zeek_cols]', @zeek_opcua_binary_create_session_field_names.zip(event.get('[message]')).to_h)"
          }
        }
      }

      mutate {
        id => "mutate_add_fields_zeek_opcua_binary_create_session"
        add_field => {
          "[zeek_cols][proto]" => "tcp"
          "[zeek_cols][service]" => "opcua-binary"
        }
        add_tag => [ "ics" ]
      }

    } else if ([log_source] == "opcua_binary_create_session_discovery") {
      #############################################################################################################################
      # opcua_binary_create_session_discovery.log
      # variant-types.zeek (https://github.com/cisagov/icsnpp-opcua-binary)

      if ("_jsonparsesuccess" not in [tags]) {
        dissect {
          id => "dissect_zeek_opcua_binary_create_session_discovery"
          mapping => {
            "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][drop_orig_h]} %{[zeek_cols][drop_orig_p]} %{[zeek_cols][drop_resp_h]} %{[zeek_cols][drop_resp_p]} %{[zeek_cols][is_orig]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][discovery_profile_link_id]} %{[zeek_cols][discovery_profile_uri]} %{[zeek_cols][discovery_profile_url]}"
          }
        }
        if ("_dissectfailure" in [tags]) {
          mutate {
            id => "mutate_split_zeek_opcua_binary_create_session_discovery"
            split => { "[message]" => " " }
          }
          ruby {
            id => "ruby_zip_zeek_opcua_binary_create_session_discovery"
            init => "@zeek_opcua_binary_create_session_discovery_field_names = [ 'ts', 'uid', 'drop_orig_h', 'drop_orig_p', 'drop_resp_h', 'drop_resp_p', 'is_orig', 'orig_h', 'orig_p', 'resp_p', 'discovery_profile_link_id', 'discovery_profile_uri', 'discovery_profile_url' ]"
            code => "event.set('[zeek_cols]', @zeek_opcua_binary_create_session_discovery_field_names.zip(event.get('[message]')).to_h)"
          }
        }
      }

      mutate {
        id => "mutate_add_fields_zeek_opcua_binary_create_session_discovery"
        add_field => {
          "[zeek_cols][proto]" => "tcp"
          "[zeek_cols][service]" => "opcua-binary"
        }
        add_tag => [ "ics" ]
      }

    } else if ([log_source] == "opcua_binary_create_session_endpoints") {
      #############################################################################################################################
      # opcua_binary_create_session_endpoints.log
      # variant-types.zeek (https://github.com/cisagov/icsnpp-opcua-binary)

      if ("_jsonparsesuccess" not in [tags]) {
        dissect {
          id => "dissect_zeek_opcua_binary_create_session_endpoints"
          mapping => {
            "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][drop_orig_h]} %{[zeek_cols][drop_orig_p]} %{[zeek_cols][drop_resp_h]} %{[zeek_cols][drop_resp_p]} %{[zeek_cols][is_orig]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][endpoint_link_id]} %{[zeek_cols][endpoint_url]} %{[zeek_cols][application_uri]} %{[zeek_cols][product_uri]} %{[zeek_cols][encoding_mask]} %{[zeek_cols][locale]} %{[zeek_cols][text]} %{[zeek_cols][application_type]} %{[zeek_cols][gateway_server_uri]} %{[zeek_cols][discovery_profile_uri]} %{[zeek_cols][discovery_profile_link_id]} %{[zeek_cols][cert_size]} %{[zeek_cols][server_cert]} %{[zeek_cols][message_security_mode]} %{[zeek_cols][security_policy_uri]} %{[zeek_cols][user_token_link_id]} %{[zeek_cols][transport_profile_uri]} %{[zeek_cols][security_level]}"
          }
        }
        if ("_dissectfailure" in [tags]) {
          mutate {
            id => "mutate_split_zeek_opcua_binary_create_session_endpoints"
            split => { "[message]" => " " }
          }
          ruby {
            id => "ruby_zip_zeek_opcua_binary_create_session_endpoints"
            init => "@zeek_opcua_binary_create_session_endpoints_field_names = [ 'ts', 'uid', 'drop_orig_h', 'drop_orig_p', 'drop_resp_h', 'drop_resp_p', 'is_orig', 'orig_h', 'orig_p', 'resp_p', 'endpoint_link_id', 'endpoint_url', 'application_uri', 'product_uri', 'encoding_mask', 'locale', 'text', 'application_type', 'gateway_server_uri', 'discovery_profile_uri', 'discovery_profile_link_id', 'cert_size', 'server_cert', 'message_security_mode', 'security_policy_uri', 'user_token_link_id', 'transport_profile_uri', 'security_level' ]"
            code => "event.set('[zeek_cols]', @zeek_opcua_binary_create_session_endpoints_field_names.zip(event.get('[message]')).to_h)"
          }
        }
      }

      mutate {
        id => "mutate_add_fields_zeek_opcua_binary_create_session_endpoints"
        add_field => {
          "[zeek_cols][proto]" => "tcp"
          "[zeek_cols][service]" => "opcua-binary"
        }
        add_tag => [ "ics" ]
      }

    } else if ([log_source] == "opcua_binary_create_session_user_token") {
      #############################################################################################################################
      # opcua_binary_create_session_user_token.log
      # variant-types.zeek (https://github.com/cisagov/icsnpp-opcua-binary)

      if ("_jsonparsesuccess" not in [tags]) {
        dissect {
          id => "dissect_zeek_opcua_binary_create_session_user_token"
          mapping => {
            "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][drop_orig_h]} %{[zeek_cols][drop_orig_p]} %{[zeek_cols][drop_resp_h]} %{[zeek_cols][drop_resp_p]} %{[zeek_cols][is_orig]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][user_token_link_id]} %{[zeek_cols][user_token_policy_id]} %{[zeek_cols][user_token_type]} %{[zeek_cols][user_token_issued_type]} %{[zeek_cols][user_token_endpoint_url]} %{[zeek_cols][user_token_sec_policy_uri]}"
          }
        }
        if ("_dissectfailure" in [tags]) {
          mutate {
            id => "mutate_split_zeek_opcua_binary_create_session_user_token"
            split => { "[message]" => " " }
          }
          ruby {
            id => "ruby_zip_zeek_opcua_binary_create_session_user_token"
            init => "@zeek_opcua_binary_create_session_user_token_field_names = [ 'ts', 'uid', 'drop_orig_h', 'drop_orig_p', 'drop_resp_h', 'drop_resp_p', 'is_orig', 'orig_h', 'orig_p', 'resp_p', 'user_token_link_id', 'user_token_policy_id', 'user_token_type', 'user_token_issued_type', 'user_token_endpoint_url', 'user_token_sec_policy_uri' ]"
            code => "event.set('[zeek_cols]', @zeek_opcua_binary_create_session_user_token_field_names.zip(event.get('[message]')).to_h)"
          }
        }
      }

      mutate {
        id => "mutate_add_fields_zeek_opcua_binary_create_session_user_token"
        add_field => {
          "[zeek_cols][proto]" => "tcp"
          "[zeek_cols][service]" => "opcua-binary"
        }
        add_tag => [ "ics" ]
      }

    } else if ([log_source] == "opcua_binary_create_subscription") {
      #############################################################################################################################
      # opcua_binary_create_subscription.log
      # variant-types.zeek (https://github.com/cisagov/icsnpp-opcua-binary)

      if ("_jsonparsesuccess" not in [tags]) {
        dissect {
          id => "dissect_zeek_opcua_binary_create_subscription"
          mapping => {
            "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][drop_orig_h]} %{[zeek_cols][drop_orig_p]} %{[zeek_cols][drop_resp_h]} %{[zeek_cols][drop_resp_p]} %{[zeek_cols][is_orig]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][opcua_link_id]} %{[zeek_cols][requested_publishing_interval]} %{[zeek_cols][requested_lifetime_count]} %{[zeek_cols][requested_max_keep_alive_count]} %{[zeek_cols][max_notifications_per_publish]} %{[zeek_cols][publishing_enabled]} %{[zeek_cols][priority]} %{[zeek_cols][subscription_id]} %{[zeek_cols][revised_publishing_interval]} %{[zeek_cols][revised_lifetime_count]} %{[zeek_cols][revised_max_keep_alive_count]}"
          }
        }
        if ("_dissectfailure" in [tags]) {
          mutate {
            id => "mutate_split_zeek_opcua_binary_create_subscription"
            split => { "[message]" => " " }
          }
          ruby {
            id => "ruby_zip_zeek_opcua_binary_create_subscription"
            init => "@zeek_opcua_binary_create_subscription_field_names = [ 'ts', 'uid', 'drop_orig_h', 'drop_orig_p', 'drop_resp_h', 'drop_resp_p', 'is_orig', 'orig_h', 'orig_p', 'resp_p', 'opcua_link_id', 'requested_publishing_interval', 'requested_lifetime_count', 'requested_max_keep_alive_count', 'max_notifications_per_publish', 'publishing_enabled', 'priority', 'subscription_id', 'revised_publishing_interval', 'revised_lifetime_count', 'revised_max_keep_alive_count' ]"
            code => "event.set('[zeek_cols]', @zeek_opcua_binary_create_subscription_field_names.zip(event.get('[message]')).to_h)"
          }
        }
      }

      mutate {
        id => "mutate_add_fields_zeek_opcua_binary_create_subscription"
        add_field => {
          "[zeek_cols][proto]" => "tcp"
          "[zeek_cols][service]" => "opcua-binary"
        }
        add_tag => [ "ics" ]
      }

    } else if ([log_source] == "opcua_binary_data_change_filter") {
      #############################################################################################################################
      # opcua_binary_data_change_filter.log
      # variant-types.zeek (https://github.com/cisagov/icsnpp-opcua-binary)

      if ("_jsonparsesuccess" not in [tags]) {
        dissect {
          id => "dissect_zeek_opcua_binary_data_change_filter"
          mapping => {
            "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][drop_orig_h]} %{[zeek_cols][drop_orig_p]} %{[zeek_cols][drop_resp_h]} %{[zeek_cols][drop_resp_p]} %{[zeek_cols][is_orig]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][monitored_parameters_link_id]} %{[zeek_cols][trigger]} %{[zeek_cols][deadband_type]} %{[zeek_cols][deadband_value]}"
          }
        }
        if ("_dissectfailure" in [tags]) {
          mutate {
            id => "mutate_split_zeek_opcua_binary_data_change_filter"
            split => { "[message]" => " " }
          }
          ruby {
            id => "ruby_zip_zeek_opcua_binary_data_change_filter"
            init => "@zeek_opcua_binary_data_change_filter_field_names = [ 'ts', 'uid', 'drop_orig_h', 'drop_orig_p', 'drop_resp_h', 'drop_resp_p', 'is_orig', 'orig_h', 'orig_p', 'resp_p', 'monitored_parameters_link_id', 'trigger', 'deadband_type', 'deadband_value' ]"
            code => "event.set('[zeek_cols]', @zeek_opcua_binary_data_change_filter_field_names.zip(event.get('[message]')).to_h)"
          }
        }
      }

      mutate {
        id => "mutate_add_fields_zeek_opcua_binary_data_change_filter"
        add_field => {
          "[zeek_cols][proto]" => "tcp"
          "[zeek_cols][service]" => "opcua-binary"
        }
        add_tag => [ "ics" ]
      }

    } else if ([log_source] == "opcua_binary_diag_info_detail") {
      #############################################################################################################################
      # opcua_binary_diag_info_detail.log
      # variant-types.zeek (https://github.com/cisagov/icsnpp-opcua-binary)

      if ("_jsonparsesuccess" not in [tags]) {
        dissect {
          id => "dissect_zeek_opcua_binary_diag_info_detail"
          mapping => {
            "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][drop_orig_h]} %{[zeek_cols][drop_orig_p]} %{[zeek_cols][drop_resp_h]} %{[zeek_cols][drop_resp_p]} %{[zeek_cols][is_orig]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][diag_info_link_id]} %{[zeek_cols][root_object_id]} %{[zeek_cols][source]} %{[zeek_cols][source_str]} %{[zeek_cols][inner_diag_level]} %{[zeek_cols][has_symbolic_id]} %{[zeek_cols][symbolic_id]} %{[zeek_cols][symbolic_id_str]} %{[zeek_cols][has_namespace_uri]} %{[zeek_cols][namespace_uri]} %{[zeek_cols][namespace_uri_str]} %{[zeek_cols][has_locale]} %{[zeek_cols][locale]} %{[zeek_cols][locale_str]} %{[zeek_cols][has_locale_txt]} %{[zeek_cols][locale_txt]} %{[zeek_cols][locale_txt_str]} %{[zeek_cols][has_addl_info]} %{[zeek_cols][addl_info]} %{[zeek_cols][has_inner_stat_code]} %{[zeek_cols][inner_stat_code]} %{[zeek_cols][has_inner_diag_info]}"
          }
        }
        if ("_dissectfailure" in [tags]) {
          mutate {
            id => "mutate_split_zeek_opcua_binary_diag_info_detail"
            split => { "[message]" => " " }
          }
          ruby {
            id => "ruby_zip_zeek_opcua_binary_diag_info_detail"
            init => "@zeek_opcua_binary_diag_info_detail_field_names = [ 'ts', 'uid', 'drop_orig_h', 'drop_orig_p', 'drop_resp_h', 'drop_resp_p', 'is_orig', 'orig_h', 'orig_p', 'resp_p', 'diag_info_link_id', 'root_object_id', 'source', 'source_str', 'inner_diag_level', 'has_symbolic_id', 'symbolic_id', 'symbolic_id_str', 'has_namespace_uri', 'namespace_uri', 'namespace_uri_str', 'has_locale', 'locale', 'locale_str', 'has_locale_txt', 'locale_txt', 'locale_txt_str', 'has_addl_info', 'addl_info', 'has_inner_stat_code', 'inner_stat_code', 'has_inner_diag_info' ]"
            code => "event.set('[zeek_cols]', @zeek_opcua_binary_diag_info_detail_field_names.zip(event.get('[message]')).to_h)"
          }
        }
      }

      mutate {
        id => "mutate_add_fields_zeek_opcua_binary_diag_info_detail"
        add_field => {
          "[zeek_cols][proto]" => "tcp"
          "[zeek_cols][service]" => "opcua-binary"
        }
        add_tag => [ "ics" ]
      }

    } else if ([log_source] == "opcua_binary_event_filter_element_operand") {
      #############################################################################################################################
      # opcua_binary_event_filter_element_operand.log
      # variant-types.zeek (https://github.com/cisagov/icsnpp-opcua-binary)

      if ("_jsonparsesuccess" not in [tags]) {
        dissect {
          id => "dissect_zeek_opcua_binary_event_filter_element_operand"
          mapping => {
            "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][drop_orig_h]} %{[zeek_cols][drop_orig_p]} %{[zeek_cols][drop_resp_h]} %{[zeek_cols][drop_resp_p]} %{[zeek_cols][is_orig]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][content_filter_filter_operand_link_id]} %{[zeek_cols][element_index]}"
          }
        }
        if ("_dissectfailure" in [tags]) {
          mutate {
            id => "mutate_split_zeek_opcua_binary_event_filter_element_operand"
            split => { "[message]" => " " }
          }
          ruby {
            id => "ruby_zip_zeek_opcua_binary_event_filter_element_operand"
            init => "@zeek_opcua_binary_event_filter_element_operand_field_names = [ 'ts', 'uid', 'drop_orig_h', 'drop_orig_p', 'drop_resp_h', 'drop_resp_p', 'is_orig', 'orig_h', 'orig_p', 'resp_p', 'content_filter_filter_operand_link_id', 'element_index' ]"
            code => "event.set('[zeek_cols]', @zeek_opcua_binary_event_filter_element_operand_field_names.zip(event.get('[message]')).to_h)"
          }
        }
      }

      mutate {
        id => "mutate_add_fields_zeek_opcua_binary_event_filter_element_operand"
        add_field => {
          "[zeek_cols][proto]" => "tcp"
          "[zeek_cols][service]" => "opcua-binary"
        }
        add_tag => [ "ics" ]
      }

    } else if ([log_source] == "opcua_binary_event_filter") {
      #############################################################################################################################
      # opcua_binary_event_filter.log
      # variant-types.zeek (https://github.com/cisagov/icsnpp-opcua-binary)

      if ("_jsonparsesuccess" not in [tags]) {
        dissect {
          id => "dissect_zeek_opcua_binary_event_filter"
          mapping => {
            "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][drop_orig_h]} %{[zeek_cols][drop_orig_p]} %{[zeek_cols][drop_resp_h]} %{[zeek_cols][drop_resp_p]} %{[zeek_cols][is_orig]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][monitored_parameters_link_id]} %{[zeek_cols][select_clause_link_id]} %{[zeek_cols][where_clause_content_filter_link_id]}"
          }
        }
        if ("_dissectfailure" in [tags]) {
          mutate {
            id => "mutate_split_zeek_opcua_binary_event_filter"
            split => { "[message]" => " " }
          }
          ruby {
            id => "ruby_zip_zeek_opcua_binary_event_filter"
            init => "@zeek_opcua_binary_event_filter_field_names = [ 'ts', 'uid', 'drop_orig_h', 'drop_orig_p', 'drop_resp_h', 'drop_resp_p', 'is_orig', 'orig_h', 'orig_p', 'resp_p', 'monitored_parameters_link_id', 'select_clause_link_id', 'where_clause_content_filter_link_id' ]"
            code => "event.set('[zeek_cols]', @zeek_opcua_binary_event_filter_field_names.zip(event.get('[message]')).to_h)"
          }
        }
      }

      mutate {
        id => "mutate_add_fields_zeek_opcua_binary_event_filter"
        add_field => {
          "[zeek_cols][proto]" => "tcp"
          "[zeek_cols][service]" => "opcua-binary"
        }
        add_tag => [ "ics" ]
      }

    } else if ([log_source] == "opcua_binary_get_endpoints") {
      #############################################################################################################################
      # opcua_binary_get_endpoints.log
      # variant-types.zeek (https://github.com/cisagov/icsnpp-opcua-binary)

      if ("_jsonparsesuccess" not in [tags]) {
        dissect {
          id => "dissect_zeek_opcua_binary_get_endpoints"
          mapping => {
            "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][drop_orig_h]} %{[zeek_cols][drop_orig_p]} %{[zeek_cols][drop_resp_h]} %{[zeek_cols][drop_resp_p]} %{[zeek_cols][is_orig]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][opcua_link_id]} %{[zeek_cols][endpoint_url]} %{[zeek_cols][locale_link_id]} %{[zeek_cols][profile_uri_link_id]} %{[zeek_cols][endpoint_description_link_id]}"
          }
        }
        if ("_dissectfailure" in [tags]) {
          mutate {
            id => "mutate_split_zeek_opcua_binary_get_endpoints"
            split => { "[message]" => " " }
          }
          ruby {
            id => "ruby_zip_zeek_opcua_binary_get_endpoints"
            init => "@zeek_opcua_binary_get_endpoints_field_names = [ 'ts', 'uid', 'drop_orig_h', 'drop_orig_p', 'drop_resp_h', 'drop_resp_p', 'is_orig', 'orig_h', 'orig_p', 'resp_p', 'opcua_link_id', 'endpoint_url', 'locale_link_id', 'profile_uri_link_id', 'endpoint_description_link_id' ]"
            code => "event.set('[zeek_cols]', @zeek_opcua_binary_get_endpoints_field_names.zip(event.get('[message]')).to_h)"
          }
        }
      }

      mutate {
        id => "mutate_add_fields_zeek_opcua_binary_get_endpoints"
        add_field => {
          "[zeek_cols][proto]" => "tcp"
          "[zeek_cols][service]" => "opcua-binary"
        }
        add_tag => [ "ics" ]
      }

    } else if ([log_source] == "opcua_binary_get_endpoints_description") {
      #############################################################################################################################
      # opcua_binary_get_endpoints_description.log
      # variant-types.zeek (https://github.com/cisagov/icsnpp-opcua-binary)

      if ("_jsonparsesuccess" not in [tags]) {
        dissect {
          id => "dissect_zeek_opcua_binary_get_endpoints_description"
          mapping => {
            "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][drop_orig_h]} %{[zeek_cols][drop_orig_p]} %{[zeek_cols][drop_resp_h]} %{[zeek_cols][drop_resp_p]} %{[zeek_cols][is_orig]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][endpoint_description_link_id]} %{[zeek_cols][endpoint_uri]} %{[zeek_cols][application_uri]} %{[zeek_cols][product_uri]} %{[zeek_cols][encoding_mask]} %{[zeek_cols][locale]} %{[zeek_cols][text]} %{[zeek_cols][application_type]} %{[zeek_cols][gateway_server_uri]} %{[zeek_cols][discovery_profile_uri]} %{[zeek_cols][discovery_profile_link_id]} %{[zeek_cols][cert_size]} %{[zeek_cols][server_cert]} %{[zeek_cols][message_security_mode]} %{[zeek_cols][security_policy_uri]} %{[zeek_cols][user_token_link_id]} %{[zeek_cols][transport_profile_uri]} %{[zeek_cols][security_level]}"
          }
        }
        if ("_dissectfailure" in [tags]) {
          mutate {
            id => "mutate_split_zeek_opcua_binary_get_endpoints_description"
            split => { "[message]" => " " }
          }
          ruby {
            id => "ruby_zip_zeek_opcua_binary_get_endpoints_description"
            init => "@zeek_opcua_binary_get_endpoints_description_field_names = [ 'ts', 'uid', 'drop_orig_h', 'drop_orig_p', 'drop_resp_h', 'drop_resp_p', 'is_orig', 'orig_h', 'orig_p', 'resp_p', 'endpoint_description_link_id', 'endpoint_uri', 'application_uri', 'product_uri', 'encoding_mask', 'locale', 'text', 'application_type', 'gateway_server_uri', 'discovery_profile_uri', 'discovery_profile_link_id', 'cert_size', 'server_cert', 'message_security_mode', 'security_policy_uri', 'user_token_link_id', 'transport_profile_uri', 'security_level' ]"
            code => "event.set('[zeek_cols]', @zeek_opcua_binary_get_endpoints_description_field_names.zip(event.get('[message]')).to_h)"
          }
        }
      }

      mutate {
        id => "mutate_add_fields_zeek_opcua_binary_get_endpoints_description"
        add_field => {
          "[zeek_cols][proto]" => "tcp"
          "[zeek_cols][service]" => "opcua-binary"
        }
        add_tag => [ "ics" ]
      }

    } else if ([log_source] == "opcua_binary_get_endpoints_discovery") {
      #############################################################################################################################
      # opcua_binary_get_endpoints_discovery.log
      # variant-types.zeek (https://github.com/cisagov/icsnpp-opcua-binary)

      if ("_jsonparsesuccess" not in [tags]) {
        dissect {
          id => "dissect_zeek_opcua_binary_get_endpoints_discovery"
          mapping => {
            "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][drop_orig_h]} %{[zeek_cols][drop_orig_p]} %{[zeek_cols][drop_resp_h]} %{[zeek_cols][drop_resp_p]} %{[zeek_cols][is_orig]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][discovery_profile_link_id]} %{[zeek_cols][discovery_profile_url]}"
          }
        }
        if ("_dissectfailure" in [tags]) {
          mutate {
            id => "mutate_split_zeek_opcua_binary_get_endpoints_discovery"
            split => { "[message]" => " " }
          }
          ruby {
            id => "ruby_zip_zeek_opcua_binary_get_endpoints_discovery"
            init => "@zeek_opcua_binary_get_endpoints_discovery_field_names = [ 'ts', 'uid', 'drop_orig_h', 'drop_orig_p', 'drop_resp_h', 'drop_resp_p', 'is_orig', 'orig_h', 'orig_p', 'resp_p', 'discovery_profile_link_id', 'discovery_profile_url' ]"
            code => "event.set('[zeek_cols]', @zeek_opcua_binary_get_endpoints_discovery_field_names.zip(event.get('[message]')).to_h)"
          }
        }
      }

      mutate {
        id => "mutate_add_fields_zeek_opcua_binary_get_endpoints_discovery"
        add_field => {
          "[zeek_cols][proto]" => "tcp"
          "[zeek_cols][service]" => "opcua-binary"
        }
        add_tag => [ "ics" ]
      }

    } else if ([log_source] == "opcua_binary_get_endpoints_locale_id") {
      #############################################################################################################################
      # opcua_binary_get_endpoints_locale_id.log
      # variant-types.zeek (https://github.com/cisagov/icsnpp-opcua-binary)

      if ("_jsonparsesuccess" not in [tags]) {
        dissect {
          id => "dissect_zeek_opcua_binary_get_endpoints_locale_id"
          mapping => {
            "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][drop_orig_h]} %{[zeek_cols][drop_orig_p]} %{[zeek_cols][drop_resp_h]} %{[zeek_cols][drop_resp_p]} %{[zeek_cols][is_orig]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][locale_link_id]} %{[zeek_cols][locale_id]}"
          }
        }
        if ("_dissectfailure" in [tags]) {
          mutate {
            id => "mutate_split_zeek_opcua_binary_get_endpoints_locale_id"
            split => { "[message]" => " " }
          }
          ruby {
            id => "ruby_zip_zeek_opcua_binary_get_endpoints_locale_id"
            init => "@zeek_opcua_binary_get_endpoints_locale_id_field_names = [ 'ts', 'uid', 'drop_orig_h', 'drop_orig_p', 'drop_resp_h', 'drop_resp_p', 'is_orig', 'orig_h', 'orig_p', 'resp_p', 'locale_link_id', 'locale_id' ]"
            code => "event.set('[zeek_cols]', @zeek_opcua_binary_get_endpoints_locale_id_field_names.zip(event.get('[message]')).to_h)"
          }
        }
      }

      mutate {
        id => "mutate_add_fields_zeek_opcua_binary_get_endpoints_locale_id"
        add_field => {
          "[zeek_cols][proto]" => "tcp"
          "[zeek_cols][service]" => "opcua-binary"
        }
        add_tag => [ "ics" ]
      }

    } else if ([log_source] == "opcua_binary_get_endpoints_profile_uri") {
      #############################################################################################################################
      # opcua_binary_get_endpoints_profile_uri.log
      # variant-types.zeek (https://github.com/cisagov/icsnpp-opcua-binary)

      if ("_jsonparsesuccess" not in [tags]) {
        dissect {
          id => "dissect_zeek_opcua_binary_get_endpoints_profile_uri"
          mapping => {
            "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][drop_orig_h]} %{[zeek_cols][drop_orig_p]} %{[zeek_cols][drop_resp_h]} %{[zeek_cols][drop_resp_p]} %{[zeek_cols][is_orig]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][profile_uri_link_id]} %{[zeek_cols][profile_uri]}"
          }
        }
        if ("_dissectfailure" in [tags]) {
          mutate {
            id => "mutate_split_zeek_opcua_binary_get_endpoints_profile_uri"
            split => { "[message]" => " " }
          }
          ruby {
            id => "ruby_zip_zeek_opcua_binary_get_endpoints_profile_uri"
            init => "@zeek_opcua_binary_get_endpoints_profile_uri_field_names = [ 'ts', 'uid', 'drop_orig_h', 'drop_orig_p', 'drop_resp_h', 'drop_resp_p', 'is_orig', 'orig_h', 'orig_p', 'resp_p', 'profile_uri_link_id', 'profile_uri' ]"
            code => "event.set('[zeek_cols]', @zeek_opcua_binary_get_endpoints_profile_uri_field_names.zip(event.get('[message]')).to_h)"
          }
        }
      }

      mutate {
        id => "mutate_add_fields_zeek_opcua_binary_get_endpoints_profile_uri"
        add_field => {
          "[zeek_cols][proto]" => "tcp"
          "[zeek_cols][service]" => "opcua-binary"
        }
        add_tag => [ "ics" ]
      }

    } else if ([log_source] == "opcua_binary_get_endpoints_user_token") {
      #############################################################################################################################
      # opcua_binary_get_endpoints_user_token.log
      # variant-types.zeek (https://github.com/cisagov/icsnpp-opcua-binary)

      if ("_jsonparsesuccess" not in [tags]) {
        dissect {
          id => "dissect_zeek_opcua_binary_get_endpoints_user_token"
          mapping => {
            "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][drop_orig_h]} %{[zeek_cols][drop_orig_p]} %{[zeek_cols][drop_resp_h]} %{[zeek_cols][drop_resp_p]} %{[zeek_cols][is_orig]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][user_token_link_id]} %{[zeek_cols][user_token_policy_id]} %{[zeek_cols][user_token_type]} %{[zeek_cols][user_token_issued_type]} %{[zeek_cols][user_token_endpoint_url]} %{[zeek_cols][user_token_sec_policy_uri]}"
          }
        }
        if ("_dissectfailure" in [tags]) {
          mutate {
            id => "mutate_split_zeek_opcua_binary_get_endpoints_user_token"
            split => { "[message]" => " " }
          }
          ruby {
            id => "ruby_zip_zeek_opcua_binary_get_endpoints_user_token"
            init => "@zeek_opcua_binary_get_endpoints_user_token_field_names = [ 'ts', 'uid', 'drop_orig_h', 'drop_orig_p', 'drop_resp_h', 'drop_resp_p', 'is_orig', 'orig_h', 'orig_p', 'resp_p', 'user_token_link_id', 'user_token_policy_id', 'user_token_type', 'user_token_issued_type', 'user_token_endpoint_url', 'user_token_sec_policy_uri' ]"
            code => "event.set('[zeek_cols]', @zeek_opcua_binary_get_endpoints_user_token_field_names.zip(event.get('[message]')).to_h)"
          }
        }
      }

      mutate {
        id => "mutate_add_fields_zeek_opcua_binary_get_endpoints_user_token"
        add_field => {
          "[zeek_cols][proto]" => "tcp"
          "[zeek_cols][service]" => "opcua-binary"
        }
        add_tag => [ "ics" ]
      }

    } else if ([log_source] == "opcua_binary_event_filter_literal_operand") {
      #############################################################################################################################
      # opcua_binary_event_filter_literal_operand.log
      # variant-types.zeek (https://github.com/cisagov/icsnpp-opcua-binary)

      if ("_jsonparsesuccess" not in [tags]) {
        dissect {
          id => "dissect_zeek_opcua_binary_event_filter_literal_operand"
          mapping => {
            "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][drop_orig_h]} %{[zeek_cols][drop_orig_p]} %{[zeek_cols][drop_resp_h]} %{[zeek_cols][drop_resp_p]} %{[zeek_cols][is_orig]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][content_filter_filter_operand_link_id]} %{[zeek_cols][literal_operand_variant_link]}"
          }
        }
        if ("_dissectfailure" in [tags]) {
          mutate {
            id => "mutate_split_zeek_opcua_binary_event_filter_literal_operand"
            split => { "[message]" => " " }
          }
          ruby {
            id => "ruby_zip_zeek_opcua_binary_event_filter_literal_operand"
            init => "@zeek_opcua_binary_event_filter_literal_operand_field_names = [ 'ts', 'uid', 'drop_orig_h', 'drop_orig_p', 'drop_resp_h', 'drop_resp_p', 'is_orig', 'orig_h', 'orig_p', 'resp_p', 'content_filter_filter_operand_link_id', 'literal_operand_variant_link' ]"
            code => "event.set('[zeek_cols]', @zeek_opcua_binary_event_filter_literal_operand_field_names.zip(event.get('[message]')).to_h)"
          }
        }
      }

      mutate {
        id => "mutate_add_fields_zeek_opcua_binary_event_filter_literal_operand"
        add_field => {
          "[zeek_cols][proto]" => "tcp"
          "[zeek_cols][service]" => "opcua-binary"
        }
        add_tag => [ "ics" ]
      }

    } else if ([log_source] == "opcua_binary_opensecure_channel") {
      #############################################################################################################################
      # opcua_binary_opensecure_channel.log
      # variant-types.zeek (https://github.com/cisagov/icsnpp-opcua-binary)

      if ("_jsonparsesuccess" not in [tags]) {
        dissect {
          id => "dissect_zeek_opcua_binary_opensecure_channel"
          mapping => {
            "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][drop_orig_h]} %{[zeek_cols][drop_orig_p]} %{[zeek_cols][drop_resp_h]} %{[zeek_cols][drop_resp_p]} %{[zeek_cols][is_orig]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][opcua_link_id]} %{[zeek_cols][client_proto_ver]} %{[zeek_cols][sec_token_request_type]} %{[zeek_cols][message_security_mode]} %{[zeek_cols][client_nonce]} %{[zeek_cols][req_lifetime]} %{[zeek_cols][server_proto_ver]} %{[zeek_cols][sec_token_sec_channel_id]} %{[zeek_cols][sec_token_id]} %{[zeek_cols][sec_token_created_at]} %{[zeek_cols][sec_token_revised_time]} %{[zeek_cols][server_nonce]}"
          }
        }
        if ("_dissectfailure" in [tags]) {
          mutate {
            id => "mutate_split_zeek_opcua_binary_opensecure_channel"
            split => { "[message]" => " " }
          }
          ruby {
            id => "ruby_zip_zeek_opcua_binary_opensecure_channel"
            init => "@zeek_opcua_binary_opensecure_channel_field_names = [ 'ts', 'uid', 'drop_orig_h', 'drop_orig_p', 'drop_resp_h', 'drop_resp_p', 'is_orig', 'orig_h', 'orig_p', 'resp_p', 'opcua_link_id', 'client_proto_ver', 'sec_token_request_type', 'message_security_mode', 'client_nonce', 'req_lifetime', 'server_proto_ver', 'sec_token_sec_channel_id', 'sec_token_id', 'sec_token_created_at', 'sec_token_revised_time', 'server_nonce' ]"
            code => "event.set('[zeek_cols]', @zeek_opcua_binary_opensecure_channel_field_names.zip(event.get('[message]')).to_h)"
          }
        }
      }

      mutate {
        id => "mutate_add_fields_zeek_opcua_binary_opensecure_channel"
        add_field => {
          "[zeek_cols][proto]" => "tcp"
          "[zeek_cols][service]" => "opcua-binary"
        }
        add_tag => [ "ics" ]
      }

    } else if ([log_source] == "opcua_binary_read") {
      #############################################################################################################################
      # opcua_binary_read.log
      # variant-types.zeek (https://github.com/cisagov/icsnpp-opcua-binary)

      if ("_jsonparsesuccess" not in [tags]) {
        dissect {
          id => "dissect_zeek_opcua_binary_read"
          mapping => {
            "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][drop_orig_h]} %{[zeek_cols][drop_orig_p]} %{[zeek_cols][drop_resp_h]} %{[zeek_cols][drop_resp_p]} %{[zeek_cols][is_orig]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][opcua_link_id]} %{[zeek_cols][max_age]} %{[zeek_cols][timestamps_to_return]} %{[zeek_cols][timestamps_to_return_str]} %{[zeek_cols][nodes_to_read_link_id]} %{[zeek_cols][read_results_link_id]} %{[zeek_cols][diag_info_link_id]}"
          }
        }
        if ("_dissectfailure" in [tags]) {
          mutate {
            id => "mutate_split_zeek_opcua_binary_read"
            split => { "[message]" => " " }
          }
          ruby {
            id => "ruby_zip_zeek_opcua_binary_read"
            init => "@zeek_opcua_binary_read_field_names = [ 'ts', 'uid', 'drop_orig_h', 'drop_orig_p', 'drop_resp_h', 'drop_resp_p', 'is_orig', 'orig_h', 'orig_p', 'resp_p', 'opcua_link_id', 'max_age', 'timestamps_to_return', 'timestamps_to_return_str', 'nodes_to_read_link_id', 'read_results_link_id', 'diag_info_link_id' ]"
            code => "event.set('[zeek_cols]', @zeek_opcua_binary_read_field_names.zip(event.get('[message]')).to_h)"
          }
        }
      }

      mutate {
        id => "mutate_add_fields_zeek_opcua_binary_read"
        add_field => {
          "[zeek_cols][proto]" => "tcp"
          "[zeek_cols][service]" => "opcua-binary"
        }
        add_tag => [ "ics" ]
      }

    } else if ([log_source] == "opcua_binary_read_nodes_to_read") {
      #############################################################################################################################
      # opcua_binary_read_nodes_to_read.log
      # variant-types.zeek (https://github.com/cisagov/icsnpp-opcua-binary)

      if ("_jsonparsesuccess" not in [tags]) {
        dissect {
          id => "dissect_zeek_opcua_binary_read_nodes_to_read"
          mapping => {
            "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][drop_orig_h]} %{[zeek_cols][drop_orig_p]} %{[zeek_cols][drop_resp_h]} %{[zeek_cols][drop_resp_p]} %{[zeek_cols][is_orig]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][nodes_to_read_link_id]} %{[zeek_cols][node_id_encoding_mask]} %{[zeek_cols][node_id_namespace_idx]} %{[zeek_cols][node_id_numeric]} %{[zeek_cols][node_id_string]} %{[zeek_cols][node_id_guid]} %{[zeek_cols][node_id_opaque]} %{[zeek_cols][attribute_id]} %{[zeek_cols][attribute_id_str]} %{[zeek_cols][index_range]} %{[zeek_cols][data_encoding_name_idx]} %{[zeek_cols][data_encoding_name]}"
          }
        }
        if ("_dissectfailure" in [tags]) {
          mutate {
            id => "mutate_split_zeek_opcua_binary_read_nodes_to_read"
            split => { "[message]" => " " }
          }
          ruby {
            id => "ruby_zip_zeek_opcua_binary_read_nodes_to_read"
            init => "@zeek_opcua_binary_read_nodes_to_read_field_names = [ 'ts', 'uid', 'drop_orig_h', 'drop_orig_p', 'drop_resp_h', 'drop_resp_p', 'is_orig', 'orig_h', 'orig_p', 'resp_p', 'nodes_to_read_link_id', 'node_id_encoding_mask', 'node_id_namespace_idx', 'node_id_numeric', 'node_id_string', 'node_id_guid', 'node_id_opaque', 'attribute_id', 'attribute_id_str', 'index_range', 'data_encoding_name_idx', 'data_encoding_name' ]"
            code => "event.set('[zeek_cols]', @zeek_opcua_binary_read_nodes_to_read_field_names.zip(event.get('[message]')).to_h)"
          }
        }
      }

      mutate {
        id => "mutate_add_fields_zeek_opcua_binary_read_nodes_to_read"
        add_field => {
          "[zeek_cols][proto]" => "tcp"
          "[zeek_cols][service]" => "opcua-binary"
        }
        add_tag => [ "ics" ]
      }

    } else if ([log_source] == "opcua_binary_read_results") {
      #############################################################################################################################
      # opcua_binary_read_results.log
      # variant-types.zeek (https://github.com/cisagov/icsnpp-opcua-binary)

      if ("_jsonparsesuccess" not in [tags]) {
        dissect {
          id => "dissect_zeek_opcua_binary_read_results"
          mapping => {
            "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][drop_orig_h]} %{[zeek_cols][drop_orig_p]} %{[zeek_cols][drop_resp_h]} %{[zeek_cols][drop_resp_p]} %{[zeek_cols][is_orig]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][results_link_id]} %{[zeek_cols][level]} %{[zeek_cols][data_value_encoding_mask]} %{[zeek_cols][status_code_link_id]} %{[zeek_cols][source_timestamp]} %{[zeek_cols][source_pico_sec]} %{[zeek_cols][server_timestamp]} %{[zeek_cols][server_pico_sec]} %{[zeek_cols][read_results_variant_metadata_link_id]}"
          }
        }
        if ("_dissectfailure" in [tags]) {
          mutate {
            id => "mutate_split_zeek_opcua_binary_read_results"
            split => { "[message]" => " " }
          }
          ruby {
            id => "ruby_zip_zeek_opcua_binary_read_results"
            init => "@zeek_opcua_binary_read_results_field_names = [ 'ts', 'uid', 'drop_orig_h', 'drop_orig_p', 'drop_resp_h', 'drop_resp_p', 'is_orig', 'orig_h', 'orig_p', 'resp_p', 'results_link_id', 'level', 'data_value_encoding_mask', 'status_code_link_id', 'source_timestamp', 'source_pico_sec', 'server_timestamp', 'server_pico_sec', 'read_results_variant_metadata_link_id' ]"
            code => "event.set('[zeek_cols]', @zeek_opcua_binary_read_results_field_names.zip(event.get('[message]')).to_h)"
          }
        }
      }

      mutate {
        id => "mutate_add_fields_zeek_opcua_binary_read_results"
        add_field => {
          "[zeek_cols][proto]" => "tcp"
          "[zeek_cols][service]" => "opcua-binary"
        }
        add_tag => [ "ics" ]
      }

    } else if ([log_source] == "opcua_binary_event_filter_select_clause") {
      #############################################################################################################################
      # opcua_binary_event_filter_select_clause.log
      # variant-types.zeek (https://github.com/cisagov/icsnpp-opcua-binary)

      if ("_jsonparsesuccess" not in [tags]) {
        dissect {
          id => "dissect_zeek_opcua_binary_event_filter_select_clause"
          mapping => {
            "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][drop_orig_h]} %{[zeek_cols][drop_orig_p]} %{[zeek_cols][drop_resp_h]} %{[zeek_cols][drop_resp_p]} %{[zeek_cols][is_orig]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][select_clause_link_id]} %{[zeek_cols][type_id_encoding_mask]} %{[zeek_cols][type_id_namespace_idx]} %{[zeek_cols][type_id_numeric]} %{[zeek_cols][type_id_string]} %{[zeek_cols][type_id_guid]} %{[zeek_cols][type_id_opaque]} %{[zeek_cols][simple_attribute_operand_browse_path_link_id]} %{[zeek_cols][attribute_id]} %{[zeek_cols][index_range]} %{[zeek_cols][select_clause_status_code_link_id]} %{[zeek_cols][select_clause_diagnostic_info_link_id]}"
          }
        }
        if ("_dissectfailure" in [tags]) {
          mutate {
            id => "mutate_split_zeek_opcua_binary_event_filter_select_clause"
            split => { "[message]" => " " }
          }
          ruby {
            id => "ruby_zip_zeek_opcua_binary_event_filter_select_clause"
            init => "@zeek_opcua_binary_event_filter_select_clause_field_names = [ 'ts', 'uid', 'drop_orig_h', 'drop_orig_p', 'drop_resp_h', 'drop_resp_p', 'is_orig', 'orig_h', 'orig_p', 'resp_p', 'select_clause_link_id', 'type_id_encoding_mask', 'type_id_namespace_idx', 'type_id_numeric', 'type_id_string', 'type_id_guid', 'type_id_opaque', 'simple_attribute_operand_browse_path_link_id', 'attribute_id', 'index_range', 'select_clause_status_code_link_id', 'select_clause_diagnostic_info_link_id' ]"
            code => "event.set('[zeek_cols]', @zeek_opcua_binary_event_filter_select_clause_field_names.zip(event.get('[message]')).to_h)"
          }
        }
      }

      mutate {
        id => "mutate_add_fields_zeek_opcua_binary_event_filter_select_clause"
        add_field => {
          "[zeek_cols][proto]" => "tcp"
          "[zeek_cols][service]" => "opcua-binary"
        }
        add_tag => [ "ics" ]
      }

    } else if ([log_source] == "opcua_binary_event_filter_simple_attribute_operand") {
      #############################################################################################################################
      # opcua_binary_event_filter_simple_attribute_operand.log
      # variant-types.zeek (https://github.com/cisagov/icsnpp-opcua-binary)

      if ("_jsonparsesuccess" not in [tags]) {
        dissect {
          id => "dissect_zeek_opcua_binary_event_filter_simple_attribute_operand"
          mapping => {
            "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][drop_orig_h]} %{[zeek_cols][drop_orig_p]} %{[zeek_cols][drop_resp_h]} %{[zeek_cols][drop_resp_p]} %{[zeek_cols][is_orig]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][content_filter_filter_operand_link_id]} %{[zeek_cols][type_id_encoding_mask]} %{[zeek_cols][type_id_namespace_idx]} %{[zeek_cols][type_id_numeric]} %{[zeek_cols][type_id_string]} %{[zeek_cols][type_id_guid]} %{[zeek_cols][type_id_opaque]} %{[zeek_cols][simple_attribute_operand_browse_path_link_id]} %{[zeek_cols][attribute_id]} %{[zeek_cols][index_range]}"
          }
        }
        if ("_dissectfailure" in [tags]) {
          mutate {
            id => "mutate_split_zeek_opcua_binary_event_filter_simple_attribute_operand"
            split => { "[message]" => " " }
          }
          ruby {
            id => "ruby_zip_zeek_opcua_binary_event_filter_simple_attribute_operand"
            init => "@zeek_opcua_binary_event_filter_simple_attribute_operand_field_names = [ 'ts', 'uid', 'drop_orig_h', 'drop_orig_p', 'drop_resp_h', 'drop_resp_p', 'is_orig', 'orig_h', 'orig_p', 'resp_p', 'content_filter_filter_operand_link_id', 'type_id_encoding_mask', 'type_id_namespace_idx', 'type_id_numeric', 'type_id_string', 'type_id_guid', 'type_id_opaque', 'simple_attribute_operand_browse_path_link_id', 'attribute_id', 'index_range' ]"
            code => "event.set('[zeek_cols]', @zeek_opcua_binary_event_filter_simple_attribute_operand_field_names.zip(event.get('[message]')).to_h)"
          }
        }
      }

      mutate {
        id => "mutate_add_fields_zeek_opcua_binary_event_filter_simple_attribute_operand"
        add_field => {
          "[zeek_cols][proto]" => "tcp"
          "[zeek_cols][service]" => "opcua-binary"
        }
        add_tag => [ "ics" ]
      }

    } else if ([log_source] == "opcua_binary_event_filter_simple_attribute_operand_browse_paths") {
      #############################################################################################################################
      # opcua_binary_event_filter_simple_attribute_operand_browse_paths.log
      # variant-types.zeek (https://github.com/cisagov/icsnpp-opcua-binary)

      if ("_jsonparsesuccess" not in [tags]) {
        dissect {
          id => "dissect_zeek_opcua_binary_event_filter_simple_attribute_operand_browse_paths"
          mapping => {
            "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][drop_orig_h]} %{[zeek_cols][drop_orig_p]} %{[zeek_cols][drop_resp_h]} %{[zeek_cols][drop_resp_p]} %{[zeek_cols][is_orig]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][simple_attribute_operand_browse_path_link_id]} %{[zeek_cols][browse_path_src]} %{[zeek_cols][namespace_index]} %{[zeek_cols][name]}"
          }
        }
        if ("_dissectfailure" in [tags]) {
          mutate {
            id => "mutate_split_zeek_opcua_binary_event_filter_simple_attribute_operand_browse_paths"
            split => { "[message]" => " " }
          }
          ruby {
            id => "ruby_zip_zeek_opcua_binary_event_filter_simple_attribute_operand_browse_paths"
            init => "@zeek_opcua_binary_event_filter_simple_attribute_operand_browse_paths_field_names = [ 'ts', 'uid', 'drop_orig_h', 'drop_orig_p', 'drop_resp_h', 'drop_resp_p', 'is_orig', 'orig_h', 'orig_p', 'resp_p', 'simple_attribute_operand_browse_path_link_id', 'browse_path_src', 'namespace_index', 'name' ]"
            code => "event.set('[zeek_cols]', @zeek_opcua_binary_event_filter_simple_attribute_operand_browse_paths_field_names.zip(event.get('[message]')).to_h)"
          }
        }
      }

      mutate {
        id => "mutate_add_fields_zeek_opcua_binary_event_filter_simple_attribute_operand_browse_paths"
        add_field => {
          "[zeek_cols][proto]" => "tcp"
          "[zeek_cols][service]" => "opcua-binary"
        }
        add_tag => [ "ics" ]
      }

    } else if ([log_source] == "opcua_binary_status_code_detail") {
      #############################################################################################################################
      # opcua_binary_status_code_detail.log
      # variant-types.zeek (https://github.com/cisagov/icsnpp-opcua-binary)

      if ("_jsonparsesuccess" not in [tags]) {
        dissect {
          id => "dissect_zeek_opcua_binary_status_code_detail"
          mapping => {
            "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][drop_orig_h]} %{[zeek_cols][drop_orig_p]} %{[zeek_cols][drop_resp_h]} %{[zeek_cols][drop_resp_p]} %{[zeek_cols][is_orig]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][status_code_link_id]} %{[zeek_cols][source]} %{[zeek_cols][source_str]} %{[zeek_cols][source_level]} %{[zeek_cols][status_code]} %{[zeek_cols][severity]} %{[zeek_cols][severity_str]} %{[zeek_cols][sub_code]} %{[zeek_cols][sub_code_str]} %{[zeek_cols][structure_changed]} %{[zeek_cols][semantics_changed]} %{[zeek_cols][info_type]} %{[zeek_cols][info_type_str]} %{[zeek_cols][limit_bits]} %{[zeek_cols][limit_bits_str]} %{[zeek_cols][overflow]} %{[zeek_cols][historian_bits]} %{[zeek_cols][historian_bits_str]} %{[zeek_cols][historianpartial]} %{[zeek_cols][historianextradata]} %{[zeek_cols][historianmultivalue]}"
          }
        }
        if ("_dissectfailure" in [tags]) {
          mutate {
            id => "mutate_split_zeek_opcua_binary_status_code_detail"
            split => { "[message]" => " " }
          }
          ruby {
            id => "ruby_zip_zeek_opcua_binary_status_code_detail"
            init => "@zeek_opcua_binary_status_code_detail_field_names = [ 'ts', 'uid', 'drop_orig_h', 'drop_orig_p', 'drop_resp_h', 'drop_resp_p', 'is_orig', 'orig_h', 'orig_p', 'resp_p', 'status_code_link_id', 'source', 'source_str', 'source_level', 'status_code', 'severity', 'severity_str', 'sub_code', 'sub_code_str', 'structure_changed', 'semantics_changed', 'info_type', 'info_type_str', 'limit_bits', 'limit_bits_str', 'overflow', 'historian_bits', 'historian_bits_str', 'historianpartial', 'historianextradata', 'historianmultivalue' ]"
            code => "event.set('[zeek_cols]', @zeek_opcua_binary_status_code_detail_field_names.zip(event.get('[message]')).to_h)"
          }
        }
      }

      mutate {
        id => "mutate_add_fields_zeek_opcua_binary_status_code_detail"
        add_field => {
          "[zeek_cols][proto]" => "tcp"
          "[zeek_cols][service]" => "opcua-binary"
        }
        add_tag => [ "ics" ]
      }

    } else if ([log_source] == "opcua_binary_variant_array_dims") {
      #############################################################################################################################
      # opcua_binary_variant_array_dims.log
      # variant-types.zeek (https://github.com/cisagov/icsnpp-opcua-binary)

      if ("_jsonparsesuccess" not in [tags]) {
        dissect {
          id => "dissect_zeek_opcua_binary_variant_array_dims"
          mapping => {
            "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][drop_orig_h]} %{[zeek_cols][drop_orig_p]} %{[zeek_cols][drop_resp_h]} %{[zeek_cols][drop_resp_p]} %{[zeek_cols][is_orig]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][array_dim_link_id]} %{[zeek_cols][dimension]}"
          }
        }
        if ("_dissectfailure" in [tags]) {
          mutate {
            id => "mutate_split_zeek_opcua_binary_variant_array_dims"
            split => { "[message]" => " " }
          }
          ruby {
            id => "ruby_zip_zeek_opcua_binary_variant_array_dims"
            init => "@zeek_opcua_binary_variant_array_dims_field_names = [ 'ts', 'uid', 'drop_orig_h', 'drop_orig_p', 'drop_resp_h', 'drop_resp_p', 'is_orig', 'orig_h', 'orig_p', 'resp_p', 'array_dim_link_id', 'dimension' ]"
            code => "event.set('[zeek_cols]', @zeek_opcua_binary_variant_array_dims_field_names.zip(event.get('[message]')).to_h)"
          }
        }
      }

      mutate {
        id => "mutate_add_fields_zeek_opcua_binary_variant_array_dims"
        add_field => {
          "[zeek_cols][proto]" => "tcp"
          "[zeek_cols][service]" => "opcua-binary"
        }
        add_tag => [ "ics" ]
      }

    } else if ([log_source] == "opcua_binary_variant_data") {
      #############################################################################################################################
      # opcua_binary_variant_data.log
      # variant-types.zeek (https://github.com/cisagov/icsnpp-opcua-binary)

      if ("_jsonparsesuccess" not in [tags]) {
        dissect {
          id => "dissect_zeek_opcua_binary_variant_data"
          mapping => {
            "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][drop_orig_h]} %{[zeek_cols][drop_orig_p]} %{[zeek_cols][drop_resp_h]} %{[zeek_cols][drop_resp_p]} %{[zeek_cols][is_orig]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][variant_data_link_id]} %{[zeek_cols][variant_data_value_signed_numeric]} %{[zeek_cols][variant_data_value_unsigned_numeric]} %{[zeek_cols][variant_data_value_string]} %{[zeek_cols][variant_data_node_id_encoding_mask]} %{[zeek_cols][variant_data_node_id_namespace_idx]} %{[zeek_cols][variant_data_node_id_numeric]} %{[zeek_cols][variant_data_node_id_string]} %{[zeek_cols][variant_data_node_id_guid]} %{[zeek_cols][variant_data_node_id_opaque]} %{[zeek_cols][variant_data_node_id_namespace_uri]} %{[zeek_cols][variant_data_node_id_server_idx]} %{[zeek_cols][variant_data_value_time]} %{[zeek_cols][variant_data_encoding_name_idx]} %{[zeek_cols][variant_data_encoding_name]} %{[zeek_cols][variant_data_mask]} %{[zeek_cols][variant_data_locale]} %{[zeek_cols][variant_data_text]} %{[zeek_cols][variant_data_value_decimal]} %{[zeek_cols][variant_data_status_code_link_id]} %{[zeek_cols][variant_data_diag_info_link_id]} %{[zeek_cols][variant_data_ext_obj_link_id]} %{[zeek_cols][variant_metadata_data_link_id]} %{[zeek_cols][variant_data_value_link_id]}"
          }
        }
        if ("_dissectfailure" in [tags]) {
          mutate {
            id => "mutate_split_zeek_opcua_binary_variant_data"
            split => { "[message]" => " " }
          }
          ruby {
            id => "ruby_zip_zeek_opcua_binary_variant_data"
            init => "@zeek_opcua_binary_variant_data_field_names = [ 'ts', 'uid', 'drop_orig_h', 'drop_orig_p', 'drop_resp_h', 'drop_resp_p', 'is_orig', 'orig_h', 'orig_p', 'resp_p', 'variant_data_link_id', 'variant_data_value_signed_numeric', 'variant_data_value_unsigned_numeric', 'variant_data_value_string', 'variant_data_node_id_encoding_mask', 'variant_data_node_id_namespace_idx', 'variant_data_node_id_numeric', 'variant_data_node_id_string', 'variant_data_node_id_guid', 'variant_data_node_id_opaque', 'variant_data_node_id_namespace_uri', 'variant_data_node_id_server_idx', 'variant_data_value_time', 'variant_data_encoding_name_idx', 'variant_data_encoding_name', 'variant_data_mask', 'variant_data_locale', 'variant_data_text', 'variant_data_value_decimal', 'variant_data_status_code_link_id', 'variant_data_diag_info_link_id', 'variant_data_ext_obj_link_id', 'variant_metadata_data_link_id', 'variant_data_value_link_id' ]"
            code => "event.set('[zeek_cols]', @zeek_opcua_binary_variant_data_field_names.zip(event.get('[message]')).to_h)"
          }
        }
      }

      mutate {
        id => "mutate_add_fields_zeek_opcua_binary_variant_data"
        add_field => {
          "[zeek_cols][proto]" => "tcp"
          "[zeek_cols][service]" => "opcua-binary"
        }
        add_tag => [ "ics" ]
      }

    } else if ([log_source] == "opcua_binary_variant_data_value") {
      #############################################################################################################################
      # opcua_binary_variant_data_value.log
      # variant-types.zeek (https://github.com/cisagov/icsnpp-opcua-binary)

      if ("_jsonparsesuccess" not in [tags]) {
        dissect {
          id => "dissect_zeek_opcua_binary_variant_data_value"
          mapping => {
            "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][drop_orig_h]} %{[zeek_cols][drop_orig_p]} %{[zeek_cols][drop_resp_h]} %{[zeek_cols][drop_resp_p]} %{[zeek_cols][is_orig]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][variant_data_value_source_link]} %{[zeek_cols][data_value_encoding_mask]} %{[zeek_cols][status_code_link_id]} %{[zeek_cols][source_timestamp]} %{[zeek_cols][source_pico_sec]} %{[zeek_cols][server_timestamp]} %{[zeek_cols][server_pico_sec]} %{[zeek_cols][variant_metadata_link_id]}"
          }
        }
        if ("_dissectfailure" in [tags]) {
          mutate {
            id => "mutate_split_zeek_opcua_binary_variant_data_value"
            split => { "[message]" => " " }
          }
          ruby {
            id => "ruby_zip_zeek_opcua_binary_variant_data_value"
            init => "@zeek_opcua_binary_variant_data_value_field_names = [ 'ts', 'uid', 'drop_orig_h', 'drop_orig_p', 'drop_resp_h', 'drop_resp_p', 'is_orig', 'orig_h', 'orig_p', 'resp_p', 'variant_data_value_source_link', 'data_value_encoding_mask', 'status_code_link_id', 'source_timestamp', 'source_pico_sec', 'server_timestamp', 'server_pico_sec', 'variant_metadata_link_id' ]"
            code => "event.set('[zeek_cols]', @zeek_opcua_binary_variant_data_value_field_names.zip(event.get('[message]')).to_h)"
          }
        }
      }

      mutate {
        id => "mutate_add_fields_zeek_opcua_binary_variant_data_value"
        add_field => {
          "[zeek_cols][proto]" => "tcp"
          "[zeek_cols][service]" => "opcua-binary"
        }
        add_tag => [ "ics" ]
      }

    } else if ([log_source] == "opcua_binary_variant_extension_object") {
      #############################################################################################################################
      # opcua_binary_variant_extension_object.log
      # variant-types.zeek (https://github.com/cisagov/icsnpp-opcua-binary)

      if ("_jsonparsesuccess" not in [tags]) {
        dissect {
          id => "dissect_zeek_opcua_binary_variant_extension_object"
          mapping => {
            "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][drop_orig_h]} %{[zeek_cols][drop_orig_p]} %{[zeek_cols][drop_resp_h]} %{[zeek_cols][drop_resp_p]} %{[zeek_cols][is_orig]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][ext_obj_link_id]} %{[zeek_cols][ext_obj_node_id_encoding_mask]} %{[zeek_cols][ext_obj_node_id_namespace_idx]} %{[zeek_cols][ext_obj_node_id_numeric]} %{[zeek_cols][ext_obj_node_id_string]} %{[zeek_cols][ext_obj_node_id_guid]} %{[zeek_cols][ext_obj_node_id_opaque]} %{[zeek_cols][ext_obj_type_id_str]} %{[zeek_cols][ext_obj_encoding]}"
          }
        }
        if ("_dissectfailure" in [tags]) {
          mutate {
            id => "mutate_split_zeek_opcua_binary_variant_extension_object"
            split => { "[message]" => " " }
          }
          ruby {
            id => "ruby_zip_zeek_opcua_binary_variant_extension_object"
            init => "@zeek_opcua_binary_variant_extension_object_field_names = [ 'ts', 'uid', 'drop_orig_h', 'drop_orig_p', 'drop_resp_h', 'drop_resp_p', 'is_orig', 'orig_h', 'orig_p', 'resp_p', 'ext_obj_link_id', 'ext_obj_node_id_encoding_mask', 'ext_obj_node_id_namespace_idx', 'ext_obj_node_id_numeric', 'ext_obj_node_id_string', 'ext_obj_node_id_guid', 'ext_obj_node_id_opaque', 'ext_obj_type_id_str', 'ext_obj_encoding' ]"
            code => "event.set('[zeek_cols]', @zeek_opcua_binary_variant_extension_object_field_names.zip(event.get('[message]')).to_h)"
          }
        }
      }

      mutate {
        id => "mutate_add_fields_zeek_opcua_binary_variant_extension_object"
        add_field => {
          "[zeek_cols][proto]" => "tcp"
          "[zeek_cols][service]" => "opcua-binary"
        }
        add_tag => [ "ics" ]
      }

    } else if ([log_source] == "opcua_binary_variant_metadata") {
      #############################################################################################################################
      # opcua_binary_variant_metadata.log
      # variant-types.zeek (https://github.com/cisagov/icsnpp-opcua-binary)

      if ("_jsonparsesuccess" not in [tags]) {
        dissect {
          id => "dissect_zeek_opcua_binary_variant_metadata"
          mapping => {
            "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][drop_orig_h]} %{[zeek_cols][drop_orig_p]} %{[zeek_cols][drop_resp_h]} %{[zeek_cols][drop_resp_p]} %{[zeek_cols][is_orig]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][variant_source_data_link_id]} %{[zeek_cols][variant_data_source]} %{[zeek_cols][variant_data_source_str]} %{[zeek_cols][dara_variant_encoding_mask]} %{[zeek_cols][data_variant_data_type]} %{[zeek_cols][data_variant_data_type_str]} %{[zeek_cols][built_in_data_type]} %{[zeek_cols][built_in_data_type_str]} %{[zeek_cols][variant_data_link_id]} %{[zeek_cols][variant_data_array_dim]} %{[zeek_cols][variant_data_array_multi_dim_link_id]}"
          }
        }
        if ("_dissectfailure" in [tags]) {
          mutate {
            id => "mutate_split_zeek_opcua_binary_variant_metadata"
            split => { "[message]" => " " }
          }
          ruby {
            id => "ruby_zip_zeek_opcua_binary_variant_metadata"
            init => "@zeek_opcua_binary_variant_metadata_field_names = [ 'ts', 'uid', 'drop_orig_h', 'drop_orig_p', 'drop_resp_h', 'drop_resp_p', 'is_orig', 'orig_h', 'orig_p', 'resp_p', 'variant_source_data_link_id', 'variant_data_source', 'variant_data_source_str', 'dara_variant_encoding_mask', 'data_variant_data_type', 'data_variant_data_type_str', 'built_in_data_type', 'built_in_data_type_str', 'variant_data_link_id', 'variant_data_array_dim', 'variant_data_array_multi_dim_link_id' ]"
            code => "event.set('[zeek_cols]', @zeek_opcua_binary_variant_metadata_field_names.zip(event.get('[message]')).to_h)"
          }
        }
      }

      mutate {
        id => "mutate_add_fields_zeek_opcua_binary_variant_metadata"
        add_field => {
          "[zeek_cols][proto]" => "tcp"
          "[zeek_cols][service]" => "opcua-binary"
        }
        add_tag => [ "ics" ]
      }

    } else if ([log_source] == "opcua_binary_write") {
      #############################################################################################################################
      # opcua_binary_write.log
      # write-types.zeek (https://github.com/cisagov/icsnpp-opcua-binary)

      if ("_jsonparsesuccess" not in [tags]) {
        dissect {
          id => "dissect_zeek_opcua_binary_write"
          mapping => {
            "[message]" => "%{[zeek_cols][ts]} %{[zeek_cols][uid]} %{[zeek_cols][drop_orig_h]} %{[zeek_cols][drop_orig_p]} %{[zeek_cols][drop_resp_h]} %{[zeek_cols][drop_resp_p]} %{[zeek_cols][is_orig]} %{[zeek_cols][orig_h]} %{[zeek_cols][orig_p]} %{[zeek_cols][resp_h]} %{[zeek_cols][resp_p]} %{[zeek_cols][opcua_link_id]} %{[zeek_cols][node_id_encoding_mask]} %{[zeek_cols][node_id_namespace_idx]} %{[zeek_cols][node_id_numeric]} %{[zeek_cols][node_id_string]}  %{[zeek_cols][node_id_guid]}  %{[zeek_cols][node_id_opaque]}  %{[zeek_cols][attribute_id]}  %{[zeek_cols][attribute_id_str]}  %{[zeek_cols][index_range]} %{[zeek_cols][data_value_encoding_mask]}  %{[zeek_cols][req_status_code_link_id]} %{[zeek_cols][source_timestamp]}  %{[zeek_cols][source_pico_sec]} %{[zeek_cols][server_timestamp]}  %{[zeek_cols][server_pico_sec]} %{[zeek_cols][write_results_variant_metadata_link_id]}  %{[zeek_cols][res_status_code_link_id]} %{[zeek_cols][diag_info_link_id]}"
          }
        }

        if ("_dissectfailure" in [tags]) {
          mutate {
            id => "mutate_split_zeek_opcua_binary_write"
            split => { "[message]" => " " }
          }
          ruby {
            id => "ruby_zip_zeek_opcua_binary_write"
            init => "$zeek_opcua_binary_write_field_names = [ 'ts', 'uid', 'drop_orig_h', 'drop_orig_p', 'drop_resp_h', 'drop_resp_p', 'is_orig', 'orig_h', 'orig_p', 'resp_p', 'opcua_link_id', 'node_id_encoding_mask', 'node_id_namespace_idx', 'node_id_numeric', 'node_id_string', 'node_id_guid', 'node_id_opaque', 'attribute_id', 'attribute_id_str', 'index_range', 'data_value_encoding_mask', 'req_status_code_link_id', 'source_timestamp', 'source_pico_sec', 'server_timestamp', 'server_pico_sec', 'write_results_variant_metadata_link_id', 'res_status_code_link_id', 'diag_info_link_id' ]"
            code => "event.set('[zeek_cols]', $zeek_opcua_binary_write_field_names.zip(event.get('[message]')).to_h)"
          }
        }
      }

      mutate {
        id => "mutate_add_fields_zeek_opcua_binary_write"
        add_field => {
          "[zeek_cols][proto]" => "tcp"
          "[zeek_cols][service]" => "opcua-binary"
        }
        add_tag => [ "ics" ]
      }

    } else {
      # some other unknown zeek opcua- log file. should start with ts at least!

      if ("_jsonparsesuccess" not in [tags]) {
        csv {
          id => "csv_zeek_unknown_opcua"
          columns => ["ts"]
          separator => "  "
          # there's no way to *disable* the csv quote char, so set it to something we'll never see
          quote_char => ""

          target => "[zeek_cols]"
        }
      }

      mutate { id => "mutate_add_tag_zeek_unknown_opcua"
               add_field => {
                 "[zeek_cols][proto]" => "tcp"
                 "[zeek_cols][service]" => "opcua-binary"
               }
               add_tag => [ "_unknown_log_type" ]
      }

    } # if / else if for opcua log types
  }

} # end Filter
