filter {

    #############################################################################################################################
    # If message looks like json, try to parse it as such. Otherwise, drop it like it's hot.
    if [message] =~ /^{.*}$/ {

        # parse the json message from eve*.json
        json { id => "json_parse_suricata"
               source => "message"
               target => "suricata" }

        # Suricata tags may have been specified in the directory name, like:
        #   .../suricata-1737561275800982-1-(SNMP,NBSITEID0)/eve.json
        # Extract the tags to apply to the event.
        ruby {
          id => "ruby_suricata_tags_extract"
          code => "
            if filePath = event.get('[log][file][path]') then
              parentDir = File.dirname(filePath).split('/').last
              if matches = parentDir.match(/suricata-\d+-\d+-(?:\((.*)\))/i) then
                tags = matches.captures[0]
                unless tags.nil?
                  filenameTags = tags.split(',')
                  nbsiteid = filenameTags.find { |str| str[/NBSITEID(.+)/] }[/NBSITEID(.+)/, 1].to_s rescue nil
                  filenameTags.delete_if{|v| ((v == nil) or (v == '') or (v !~ /\D/) or (v =~ /\A\s*NBSITEID/) or (v =~ /\A\s*(eve|pcap|dmp|log|bro|zeek|suricata|m?tcpdump|m?netsniff|autozeek|autosuricata)s?\s*\z/i))}
                  event.set('[@metadata][suricata_log_tags]', filenameTags.uniq) unless (filenameTags.length == 0)
                  event.set('[@metadata][nbsiteid]', nbsiteid) unless (nbsiteid.nil? || nbsiteid.empty?)
                end
              end
            end"
        }
        if ([@metadata][suricata_log_tags]) { mutate { id => "mutate_merge_suricata_log_tags"
                                                       merge => { "[tags]" => "[@metadata][suricata_log_tags]" } } }
        if (![@metadata][nbsiteid]) and ([netbox][site]) {
          # for forwarded logs, the NetBox site value arrives in netbox.site
          mutate {
            id => "mutate_rename_suricata_forwarded_site_id"
            rename => { "[netbox][site]" => "[@metadata][nbsiteid]" }
          }
        }

        if (![event][provider]) { mutate { id => "mutate_add_field_event_provider_suricata"
                                           add_field => { "[event][provider]" => "suricata" } } }

        if ([suricata][flow_id]) {
          # flow ID is sort of equivalent to zeek's conn UID

          # set suricata flow_id as "rootId"
          if (![rootId]) { mutate { id => "mutate_add_field_suricata_flow_id"
                                    add_field => { "[rootId]" => "%{[suricata][flow_id]}" } } }

          # ECS - suricata.flow_id -> event.id
          mutate { id => "mutate_add_field_ecs_suricata_event_id"
                   merge => { "[event][id]" => "[suricata][flow_id]" } }
        }

        if ([suricata][pcap_filename]) {
          # trim path portion of suricata.pcap_filename
          mutate { id => "mutate_gsub_suricata_pcap_filename_path"
                   gsub => [ "[suricata][pcap_filename]", "^.*/", "" ] }
        }

        # ECS - event.kind based on event_type (https://www.elastic.co/guide/en/ecs/current/ecs-allowed-values-event-kind.html)
        if ([suricata][event_type] == "alert") {
          mutate { id => "mutate_add_field_suricata_ecs_event_kind_alert"
                   add_field => { "[event][kind]" => "alert" } }
        } else if ([suricata][event_type] == "stats") {
          mutate { id => "mutate_add_field_suricata_ecs_event_kind_stats"
                   add_field => { "[event][kind]" => "metric" }
                   add_tag => [ "_suricatastats" ] }
        } else {
          mutate { id => "mutate_add_field_suricata_ecs_event_kind_event"
                   add_field => { "[event][kind]" => "event" } }
        }

        #############################################################################################################################
        # take care of log timestamps in the formats all the different tools want them (phew!)
        # suricata.timestamp - ISO8601-formatted string
        # suricata.flow.start - ISO8601-formatted string
        # suricata.flow.end - ISO8601-formatted string
        # timestamp - epoch millseconds
        # firstPacket - epoch millseconds
        # lastPacket - epoch millseconds
        # length - milliseconds
        # event.duration - epoch nanoseconds

        if (![suricata][timestamp]) {
          ruby {
            id => "ruby_suricata_timestamp_now"
            init => "require 'time'"
            code => "event.set('[suricata][timestamp]', Time.now.iso8601)"
          }
          mutate { id => "tag_suricata_empty_timestamp_set"
                   add_tag => [ "_missing_timestamp" ] }
        }

        ruby {
          id => "ruby_suricata_timestamp_calc"
          init => "require 'time'; require 'date'"
          code => "
            timpStamp = DateTime.parse(event.get('[suricata][timestamp]')).to_time
            timeStampMs = (1000*timpStamp.to_f).round(0)
            startTimeStr = event.get('[suricata][flow][start]')
            endTimeStr = event.get('[suricata][flow][end]')
            ageMs = 1000*event.get('[suricata][flow][age]').to_i
            startTimeMs = startTimeStr.nil? ? timeStampMs : (1000*DateTime.parse(startTimeStr).to_time.to_f).round(0)
            endTimeMs = endTimeStr.nil? ? timeStampMs : (1000*DateTime.parse(endTimeStr).to_time.to_f).round(0)
            durationMs = (ageMs > 0) ? ageMs : ((endTimeMs > startTimeMs) ? endTimeMs-startTimeMs : 0)
            event.set('[@timestamp]', LogStash::Timestamp.at(timpStamp))
            event.set('[timestamp]', timeStampMs)
            event.set('[firstPacket]', startTimeMs)
            event.set('[lastPacket]', endTimeMs)
            event.set('[length]', durationMs)
            event.set('[event][duration]', 1000000*durationMs)
          "
        }

        #############################################################################################################################
        #Renaming the global fields of every Suricata event type
        mutate { id => "mutate_suricata_rename_global_fields"
                 rename => { "[suricata][app_proto]" => "[network][protocol]" }
                 rename => { "[suricata][community_id]" => "[network][community_id]" }
                 rename => { "[suricata][dest_ip]" => "[destination][ip]" }
                 rename => { "[suricata][dest_port]" => "[destination][port]" }
                 rename => { "[suricata][src_ip]" => "[source][ip]" }
                 rename => { "[suricata][src_port]" => "[source][port]" }
                 rename => { "[suricata][proto]" => "[network][transport]" }
                 rename => { "[suricata][event_type]" => "[event][dataset]" }
                 rename => { "[suricata][vlan]" => "[network][vlan][id]" }
        }

        #############################################################################################################################
        # network protocol stuff

        # transport protocol (e.g., udp, tcp, etc.)
        if ([network][transport]) {
          mutate { id => "mutate_lowercase_suricata_network_transport"
                   lowercase => [ "[network][transport]" ] }
          translate {
            id => "translate_suricata_proto"
            source => "[network][transport]"
            target => "[ipProtocol]"
            dictionary_path => "/etc/ip_protocol_name_to_number.yaml"
          }
          mutate { id => "mutate_merge_suricata_proto"
                   merge => { "[protocol]" => "[network][transport]" } }
        }
        if ([ipProtocol]) {
          # ECS - ipProtocol -> network.iana_number
          mutate { id => "mutate_add_field_suricata_ecs_network_iana_number"
                   add_field => { "[network][iana_number]" => "%{[ipProtocol]}" } }
        }

        # network (application) protocol
        if ([suricata][app_proto_orig]) {
          mutate { id => "mutate_merge_suricata_app_proto_orig"
                   merge => { "[network][protocol]" => "[suricata][app_proto_orig]" } }
        }
        if ([suricata][app_proto_expected]) {
          mutate { id => "mutate_merge_suricata_app_proto_expected"
                   merge => { "[network][protocol]" => "[suricata][app_proto_expected]" } }
        }
        if ([suricata][app_proto_tc]) {
          mutate { id => "mutate_merge_suricata_app_proto_tc"
                   merge => { "[network][protocol]" => "[suricata][app_proto_tc]" } }
        }
        if ([suricata][app_proto_ts]) {
          mutate { id => "mutate_merge_suricata_app_proto_ts"
                   merge => { "[network][protocol]" => "[suricata][app_proto_ts]" } }
        }
        if ([suricata][anomaly][app_proto]) {
          mutate { id => "mutate_merge_suricata_anomaly_app_proto"
                   merge => { "[network][protocol]" => "[suricata][anomaly][app_proto]" } }
        }

        if (![network][protocol]) {

          if ([suricata][dcerpc]) {
            ruby { id => "ruby_add_field_suricata_dcerpc"
                   code => "event.set('[network][protocol]', [ 'dce_rpc', event.get('[network][protocol]') ].flatten.reject{ |e| e.nil? || e&.empty? })" }
          }
          if ([suricata][dhcp]) {
            ruby { id => "ruby_add_field_suricata_dhcp"
                   code => "event.set('[network][protocol]', [ 'dhcp', event.get('[network][protocol]') ].flatten.reject{ |e| e.nil? || e&.empty? })" }
          }
          if ([suricata][dnp3]) {
            ruby { id => "ruby_add_field_suricata_dnp3"
                   code => "event.set('[network][protocol]', [ 'dnp3', event.get('[network][protocol]') ].flatten.reject{ |e| e.nil? || e&.empty? })" }
          }
          if ([suricata][dns]) {
            ruby { id => "ruby_add_field_suricata_dns"
                   code => "event.set('[network][protocol]', [ 'dns', event.get('[network][protocol]') ].flatten.reject{ |e| e.nil? || e&.empty? })" }
          }
          if ([suricata][ftp]) {
            ruby { id => "ruby_add_field_suricata_ftp"
                   code => "event.set('[network][protocol]', [ 'ftp', event.get('[network][protocol]') ].flatten.reject{ |e| e.nil? || e&.empty? })" }
          }
          if ([suricata][http]) {
            ruby { id => "ruby_add_field_suricata_http"
                   code => "event.set('[network][protocol]', [ 'http', event.get('[network][protocol]') ].flatten.reject{ |e| e.nil? || e&.empty? })" }
          }
          if ([suricata][icmp_code]) or
             ([suricata][icmp_type]) or
             ([suricata][response_icmp_code]) or
             ([suricata][response_icmp_type]) {
            ruby { id => "ruby_add_field_suricata_icmp"
                   code => "event.set('[network][protocol]', [ 'icmp', event.get('[network][protocol]') ].flatten.reject{ |e| e.nil? || e&.empty? })" }
          }
          if ([suricata][ikev2]) {
            ruby { id => "ruby_add_field_suricata_ikev2"
                   code => "event.set('[network][protocol]', [ 'ikev2', event.get('[network][protocol]') ].flatten.reject{ |e| e.nil? || e&.empty? })" }
          }
          if ([suricata][krb5]) {
            ruby { id => "ruby_add_field_suricata_krb5"
                   code => "event.set('[network][protocol]', [ 'krb5', event.get('[network][protocol]') ].flatten.reject{ |e| e.nil? || e&.empty? })" }
          }
          if ([suricata][nfs]) {
            ruby { id => "ruby_add_field_suricata_nfs"
                   code => "event.set('[network][protocol]', [ 'nfs', event.get('[network][protocol]') ].flatten.reject{ |e| e.nil? || e&.empty? })" }
          }
          if ([suricata][rdp]) {
            ruby { id => "ruby_add_field_suricata_rdp"
                   code => "event.set('[network][protocol]', [ 'rdp', event.get('[network][protocol]') ].flatten.reject{ |e| e.nil? || e&.empty? })" }
          }
          if ([suricata][rpc]) {
            ruby { id => "ruby_add_field_suricata_rfc"
                   code => "event.set('[network][protocol]', [ 'rfc', event.get('[network][protocol]') ].flatten.reject{ |e| e.nil? || e&.empty? })" }
          }
          if ([suricata][sip]) {
            ruby { id => "ruby_add_field_suricata_sip"
                   code => "event.set('[network][protocol]', [ 'sip', event.get('[network][protocol]') ].flatten.reject{ |e| e.nil? || e&.empty? })" }
          }
          if ([suricata][smb]) {
            ruby { id => "ruby_add_field_suricata_smb"
                   code => "event.set('[network][protocol]', [ 'smb', event.get('[network][protocol]') ].flatten.reject{ |e| e.nil? || e&.empty? })" }
          }
          if ([suricata][smtp]) {
            ruby { id => "ruby_add_field_suricata_smtp"
                   code => "event.set('[network][protocol]', [ 'smtp', event.get('[network][protocol]') ].flatten.reject{ |e| e.nil? || e&.empty? })" }
          }
          if ([suricata][snmp]) {
            ruby { id => "ruby_add_field_suricata_snmp"
                   code => "event.set('[network][protocol]', [ 'snmp', event.get('[network][protocol]') ].flatten.reject{ |e| e.nil? || e&.empty? })" }
          }
          if ([suricata][ssh]) {
            ruby { id => "ruby_add_field_suricata_ssh"
                   code => "event.set('[network][protocol]', [ 'ssh', event.get('[network][protocol]') ].flatten.reject{ |e| e.nil? || e&.empty? })" }
          }
          if ([suricata][tftp]) {
            ruby { id => "ruby_add_field_suricata_tftp"
                   code => "event.set('[network][protocol]', [ 'tftp', event.get('[network][protocol]') ].flatten.reject{ |e| e.nil? || e&.empty? })" }
          }
          if ([suricata][tls]) {
            ruby { id => "ruby_add_field_suricata_tls"
                   code => "event.set('[network][protocol]', [ 'tls', event.get('[network][protocol]') ].flatten.reject{ |e| e.nil? || e&.empty? })" }
          }
        }

        #############################################################################################################################
        # protocol-specific
        # NOTE: For Suricata, we're focusing our efforts mostly on the alerts side of things and not
        # all of the various protocols (dns, dhcp, http, etc.). So there isn't going to be a ton
        # of normalization for those other protocols here. We may revisit that in the future.

        #############################################################################################################################
        # flow
        # ECS - suricata.bytes_toclient -> server.bytes
        if ([suricata][flow]) {
          if ([suricata][flow][bytes_toclient])  {
            mutate { id => "mutate_add_field_suricata_flow_server_bytes"
                     add_field => { "[server][bytes]" => "%{[suricata][flow][bytes_toclient]}" } }
          }
          if ([suricata][flow][bytes_toserver])  {
            mutate { id => "mutate_add_field_suricata_flow_client_bytes"
                     add_field => { "[client][bytes]" => "%{[suricata][flow][bytes_toserver]}" } }
          }
          if ([suricata][flow][pkts_toclient])  {
            mutate { id => "mutate_add_field_suricata_flow_server_pkts"
                     add_field => { "[server][packets]" => "%{[suricata][flow][pkts_toclient]}" } }
          }
          if ([suricata][flow][pkts_toserver])  {
            mutate { id => "mutate_add_field_suricata_flow_client_pkts"
                     add_field => { "[client][packets]" => "%{[suricata][flow][pkts_toserver]}" } }
          }
          # aggregate total bytes and packets
          ruby {
            id => "ruby_suricata_bytes_and_packets_calc"
            code => "totBytes = event.get('[client][bytes]').to_i + event.get('[server][bytes]').to_i
                     event.set('[totDataBytes]', totBytes)
                     event.set('[network][bytes]', totBytes)
                     event.set('[network][packets]', event.get('[server][packets]').to_i + event.get('[client][packets]').to_i)"
          }

          # TODO: can we normalize suricata.flow.state with zeek.conn.conn_state_description somewhere?
        }

        #############################################################################################################################
        # alert
        if ([suricata][alert]) {
            # these are normalized along with how signatures are normalized

            # ECS - suricata.alert.* -> event., rule., vulnerability., threat.,

            mutate {
                id => "mutate_rename_suricata_alert"
                add_field => { "[event][module]" => "suricata" }
                rename => { "[suricata][alert][signature]" => "[rule][name]" }
                rename => { "[suricata][alert][signature_id]" => "[rule][id]" }
            }

            if ([suricata][alert][metadata][tag]) {
              mutate { id => "mutate_merge_suricata_alert_metadata_tag"
                       merge => { "[tags]" => "[suricata][alert][metadata][tag]" } }
            }

            if ([suricata][alert][category]) {
              mutate { id => "mutate_merge_suricata_alert_category"
                       merge => { "[rule][category]" => "[suricata][alert][category]" } }
            } else if ([suricata][alert][metadata][former_category]) {
              mutate { id => "mutate_merge_suricata_alert_former_category"
                       merge => { "[rule][category]" => "[suricata][alert][metadata][former_category]" } }
            }

            if ([suricata][alert][metadata][affected_product]) {
              mutate { id => "mutate_merge_suricata_alert_affected_product"
                       merge => { "[vulnerability][category]" => "[suricata][alert][metadata][affected_product]" } }
            }

            if ([suricata][alert][metadata][attack_target]) {
              mutate { id => "mutate_merge_suricata_alert_attack_target"
                       merge => { "[vulnerability][category]" => "[suricata][alert][metadata][attack_target]" } }
            }

            if ([suricata][alert][metadata][cve]) {
                mutate {
                    id => "mutate_rename_suricata_alert_cve"
                    rename => { "[suricata][alert][metadata][cve]" => "[vulnerability][id]" }
                    add_field => { "[vulnerability][enumeration]" => "CVE" }
                }
            }

            if ([suricata][alert][metadata][mitre_tactic_id]) or
               ([suricata][alert][metadata][mitre_tactic_name]) or
               ([suricata][alert][metadata][mitre_technique_id]) or
               ([suricata][alert][metadata][mitre_technique_name]) {
               mutate {
                   id => "mutate_rename_suricata_alert_mitre"
                   rename => { "[suricata][alert][metadata][mitre_tactic_id]" => "[threat][tactic][id]" }
                   rename => { "[suricata][alert][metadata][mitre_tactic_name]" => "[threat][tactic][name]" }
                   rename => { "[suricata][alert][metadata][mitre_technique_id]" => "[threat][technique][id]" }
                   rename => { "[suricata][alert][metadata][mitre_technique_name]" => "[threat][technique][name]" }
                   add_field => { "[threat][framework]" => "MITRE ATT&CK" }
               }

               # put tactic (or technique, if not) into rule category as well
               if ([threat][tactic][name]) {
                 mutate { id => "mutate_merge_suricata_rule_category_tactic"
                          merge => { "[@metadata][suricata_rule_category_augment]" => "[threat][tactic][name]" } }
               } else if ([threat][technique][name]) {
                 mutate { id => "mutate_merge_suricata_rule_category_technique"
                          merge => { "[@metadata][suricata_rule_category_augment]" => "[threat][technique][name]" } }
               } else if ([threat][framework]) {
                 mutate { id => "mutate_merge_suricata_rule_category_framework"
                          merge => { "[@metadata][suricata_rule_category_augment]" => "[threat][framework]" } }
               }
               if ([@metadata][suricata_rule_category_augment]) {
                 mutate { id => "mutate_merge_suricata_rule_category_augment"
                          merge => { "[rule][category]" => "[@metadata][suricata_rule_category_augment]" } }
               }

            } # MITRE

            # remove alert fields that were mapped to ECS or not used by malcolm
            mutate { id => "mutate_remove_fields_suricata_alerts"
                     remove_field => [
                      "[suricata][alert][gid]",
                      "[suricata][alert][metadata][tag]",
                      "[suricata][alert][category]",
                      "[suricata][alert][metadata][former_category]",
                      "[suricata][alert][metadata][deployment]",
                      "[suricata][alert][metadata][affected_product]",
                      "[suricata][alert][metadata][attack_target]" ] }
        }

        #############################################################################################################################
        # tls
        mutate { id => "mutate_remove_field_suricata_ja3_strings"
                 remove_field => [ "[suricata][tls][ja3][string]",
                                   "[suricata][tls][ja3s][string]" ] }

        mutate {
                 id => "mutate_rename_suricata_tls"
                 rename => { "[suricata][tls][version]" => "[tls][version]"}
                 rename => { "[suricata][tls][ja3s][hash]" => "[tls][server][ja3s]"}
                 rename => { "[suricata][tls][ja3][hash]" => "[tls][client][ja3]"}
         }

         if ([tls][client][ja3] == "") {
                 mutate {
                         id => "mutate_remove_field_tls_client_ja3_suricata"
                         remove_field => [ "[tls][client][ja3]" ]
                 }
         }

         if ([tls][server][ja3s] == "") {
                 mutate {
                         id => "mutate_remove_field_tls_server_ja3s_suricata"
                         remove_field => [ "[tls][server][ja3s]" ]
                 }
         }

         if ([suricata][tls][from_proto]) {
           mutate { id => "mutate_merge_suricata_tls_from_proto"
                   merge => { "[network][protocol]" => "[suricata][tls][from_proto]" } }
         }

        #############################################################################################################################
        # tunnel
        if ([suricata][tunnel]) {

          if ([suricata][tunnel][proto]) {
            translate {
              id => "translate_suricata_tunnel_proto"
              source => "[suricata][tunnel][proto]"
              target => "[suricata][tunnel][proto]"
              dictionary_path => "/etc/ip_protocol_number_to_name.yaml"
            }
            mutate { id => "mutate_merge_suricata_tunnel_proto"
                    merge => { "[network][protocol]" => "[suricata][tunnel][proto]" } }
          }

          if ([suricata][tunnel][src_port]) and ([suricata][tunnel][src_port] == "0") {
              mutate { id => "mutate_remove_field_suricata_tunnel_src_port_zero"
                       remove_field => [ "[suricata][tunnel][src_port]" ] }
          }
          if ([suricata][tunnel][dest_port]) and ([suricata][tunnel][dest_port] == "0") {
              mutate { id => "mutate_remove_field_suricata_tunnel_dest_port_zero"
                       remove_field => [ "[suricata][tunnel][dest_port]" ] }
          }

        }

        #############################################################################################################################
        # wrap-up

        # remove some fields we don't care about or aren't using the features associated with them
        mutate {
          id => "mutate_remove_field_suricata_useless"
          remove_field => [
            "[suricata][files][stored]",
            "[suricata][fileinfo][stored]",
            "[suricata][packet]",
            "[suricata][packet_info]",
            "[suricata][payload_printable]",
            "[suricata][in_iface]"
          ]
        }

        # create a repeatable fingerprint for document ID
        fingerprint {
          id => "fingerprint_suricata_event_hash_flow_id"
          source => [ "[event][provider]",
                      "[event][dataset]",
                      "[suricata][timestamp]",
                      "[network][community_id]" ]
          concatenate_sources => true
          # uses event.hash
          ecs_compatibility => "v8"
          method => "MURMUR3_128"
          base64encode => true
        }

    } else {
        drop { id => "drop_suricata_invalid_logs" }
    }

}