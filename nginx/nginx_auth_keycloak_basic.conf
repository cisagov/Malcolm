access_by_lua_block {

    local b64 = require("ngx.base64")
    local cjson = require("cjson.safe")
    local http = require("resty.http")
    local nginx_helpers = require("nginx_auth_helpers")

    local cache = ngx.shared.token_cache
    local httpc = http.new()

    local function is_token_cached(token)
        -- token is cached if it exists in the cache and hasn't expired yet
        local expiration = cache:get(token)
        return expiration and expiration > ngx.now()
    end

    local function cache_token(token, expires_in)
        -- cache token with expiration (or 5 minutes if not provided)
        local ttl = expires_in or 300
        cache:set(token, ngx.now() + ttl, ttl)
    end

    local keycloak_auth_url = os.getenv("KEYCLOAK_AUTH_URL")
    local keycloak_realm = os.getenv("KEYCLOAK_AUTH_REALM")
    local client_id = os.getenv("KEYCLOAK_CLIENT_ID")
    local client_secret = os.getenv("KEYCLOAK_CLIENT_SECRET")

    local token_url = keycloak_auth_url .. "/realms/" .. keycloak_realm .. "/protocol/openid-connect/token"
    local introspect_url = keycloak_auth_url .. "/realms/" .. keycloak_realm .. "/protocol/openid-connect/token/introspect"

    local headers = ngx.req.get_headers()
    local auth_header = headers["Authorization"]
    local helper_err
    local access_token
    local token_data
    local username
    local password
    local groups
    local roles

    -- Retrieve stored refresh token from cookie if present
    local refresh_token = ngx.var.cookie_REFRESH_TOKEN

    -- Check if a bearer token was provided
    if auth_header and auth_header:find("Bearer ") then
        access_token = auth_header:sub(8)

        -- If access token was recently validated and cached, let it pass
        if access_token and is_token_cached(access_token) then
            ngx.log(ngx.INFO, "Access token is cached, skipping introspection, request allowed")
            ngx.req.set_header("Authorization", "Bearer " .. access_token)
            return
        end

        -- Validate the token
        helper_err, token_data = nginx_helpers.introspect_token(httpc, introspect_url, access_token, client_id, client_secret)
        if helper_err ~= ngx.HTTP_OK then
            ngx.status = helper_err
            ngx.exit(helper_err)
        end
        if token_data.active then
            helper_err, username, groups, roles = nginx_helpers.check_groups_and_roles(token_data)
            if helper_err ~= ngx.HTTP_OK then
                ngx.status = helper_err
                ngx.exit(helper_err)
            end
            ngx.log(ngx.INFO, "Valid access token, caching for " .. (token_data.exp - ngx.time()) .. " seconds, request allowed")
            cache_token(access_token, token_data.exp - ngx.time())
            nginx_helpers.set_headers(username, access_token, groups, roles)
            return
        else
            ngx.log(ngx.WARN, "Access token is expired or invalid")
        end
    end

    -- Attempt to refresh the token if a refresh token is available
    if nginx_helpers.refresh_token(httpc, token_url, client_id, client_secret, refresh_token) then
        return
    end

    -- If bearer authentication fails, fall back to Basic Auth
    if not auth_header or not auth_header:find("Basic ") then
        ngx.header["WWW-Authenticate"] = 'Basic realm="Restricted"'
        ngx.log(ngx.ERR, "Authorization Basic header not found")
        ngx.status = ngx.HTTP_UNAUTHORIZED
        ngx.exit(ngx.HTTP_UNAUTHORIZED)
    end

    -- Extract and decode credentials
    local encoded_creds = auth_header:sub(7)
    local decoded_creds, decode_err = b64.decode_base64url(encoded_creds)

    -- Check if decoding was successful
    if not decoded_creds then
        ngx.log(ngx.ERR, "Failed to decode Basic Auth credentials: ", decode_err or "unknown error")
        ngx.status = ngx.HTTP_UNAUTHORIZED
        ngx.exit(ngx.HTTP_UNAUTHORIZED)
    end

    -- Extract username and password
    username, password = decoded_creds:match("^([^:]+):(.+)$")
    if not username or not password then
        ngx.log(ngx.ERR, "Malformed Basic Auth credentials")
        ngx.status = ngx.HTTP_UNAUTHORIZED
        ngx.exit(ngx.HTTP_UNAUTHORIZED)
    end

    -- Request access & refresh token using password grant
    local res, err = httpc:request_uri(token_url, {
        method = "POST",
        body = ngx.encode_args({
            grant_type = "password",
            client_id = client_id,
            client_secret = client_secret,
            username = username,
            password = password
        }),
        headers = { ["Content-Type"] = "application/x-www-form-urlencoded" },
        ssl_verify = false
    })
    httpc:set_keepalive(60000, 10)

    if not res then
        ngx.log(ngx.ERR, "Error requesting access token: ", err or "unknown error")
        ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
        ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
    end

    local token_response, decode_err = cjson.decode(res.body)
    if not token_response or not token_response.access_token then
        ngx.log(ngx.ERR, "Failed to get access token: ", decode_err or "No response body")
        ngx.status = ngx.HTTP_UNAUTHORIZED
        ngx.exit(ngx.HTTP_UNAUTHORIZED)
    end

    -- Introspect the token
    helper_err, token_data = nginx_helpers.introspect_token(httpc, introspect_url, token_response.access_token, client_id, client_secret)
    if helper_err ~= ngx.HTTP_OK then
        ngx.status = helper_err
        ngx.exit(helper_err)
    end
    helper_err, username, groups, roles = nginx_helpers.check_groups_and_roles(token_data)
    if helper_err ~= ngx.HTTP_OK then
        ngx.status = helper_err
        ngx.exit(helper_err)
    end
    helper_err = nginx_helpers.check_rbac(token_data)
    if helper_err ~= ngx.HTTP_OK then
        ngx.status = helper_err
        ngx.exit(helper_err)
    end

    ngx.log(ngx.INFO, "Basic Auth successful")

    -- Store refresh token in HTTP-only cookie
    if token_response.refresh_token then
        ngx.header["Set-Cookie"] = "REFRESH_TOKEN=" .. ngx.escape_uri(token_response.refresh_token) .. "; Path=/; HttpOnly; Secure"
    else
        ngx.log(ngx.WARN, "No new refresh token received from provider")
    end

    -- Set user headers
    nginx_helpers.set_headers(username, token_response.access_token, groups, roles)
}